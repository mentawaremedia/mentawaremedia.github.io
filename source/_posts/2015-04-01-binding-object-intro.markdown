---
layout: post
title: "binding object intro"
date: 2015-04-01 18:04:49 -0500
comments: true
categories: [programming]
tags: [ruby, Binding object] 
author: "Juan Leal"
---

The following is a quick intro to Ruby's Binding object. The Binding object 
holds the execution context of that particular scope. You can evaluate 
variables against a particular binding to fetch or set the values of those
variables. Let's look at some code and then walkthrough what is happening.

What we're going to do in the following piece of code is capture the local
variables within the scope of Foo#run and send them to our error reporting
service which simply puts out the results to the console. In this example I am
using Ruby version 2.2.1.



``` ruby Binding object example
class Foo
  def run
    fruit = "apple"
    vegi  = "corn"
    nut   = "peanut"

    begin
      raise 
    rescue => e
      report_error(capture_variables(binding, [:e]))
    end
  end

  protected

  #error reporting service
  def report_error(var_hash)
    puts var_hash
  end

  def capture_variables(previous_binding, skip_vars = [])
    #                    -- returns [:fruit, :vegi, :nut, :e]
    #                   / 
    previous_binding.local_variables.inject({}) do |hash,var|
      begin
        # Binding#local_variable_get will fetch the value of the local variable
        #   for example Binding#local_variable_get(:fruit) returns "apple"
        hash.merge!(var => previous_binding.local_variable_get(var)) unless skip_vars.include?(var)
      rescue NameError
        #We rescue NameError due to a weird artifact that raise creates.
        #The artifact appears to be a local variable but 'raises' an error
        #  when any attempt to evaluate it occurs.
      end

      hash
    end
  end

end
```

If you notice on lines 3-4, we've set a few local variables. On line 8, we
intentionally raise an error. Line 10 sends our reporting service a hash
containing all variables in that scope with their values. The hash is
generated by the method #capture_variables.

Here's how the method works. We send it the current binding by simply sending it
'binding' as seen on line 10. We also send it an array of symbols representing any local
variables we're not interested in reporting which in our case is 'e'.

On line 22 we call Binding#local_variables which returns an array of symbols
representing the local variables we defined. We iterate over the collection
of symbols with #inject so as to build a hash with the keys being the
variable names and the values the variable values.

On line 27 we call Binding#local_variable_get to fetch the value of the local 
variable as defined in previous execution context. Now we execute Foo.new.run to
see what we get.

``` irb Console Output 
>> Foo.new.run
>> {:fruit=>"apple", :vegi=>"corn", :nut=>"peanut"}
>> nil
```

As you can see above our reporting service is receiving the hash as expected.

Feel free to drop some comments or questions below. And if you liked it then
please share on twitter, facebook or your prefered social media channel.
