<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rails | Very Good Indicators]]></title>
  <link href="http://www.verygoodindicators.com/blog/tags/rails/atom.xml" rel="self"/>
  <link href="http://www.verygoodindicators.com/"/>
  <updated>2015-04-15T10:13:25-05:00</updated>
  <id>http://www.verygoodindicators.com/</id>
  <author>
    <name><![CDATA[Mentaware Media]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tips for Faster Queries]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/14/tips-for-faster-queries/"/>
    <updated>2015-04-14T19:54:54-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/14/tips-for-faster-queries</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/fast_snail.jpg" width="300"></p>

<p>For the last few weeks I&rsquo;ve been busy at work optimizing many of our
slowest queries. On my last Rails related post I covered a work around for
PostgreSQL&rsquo;s inherit slowness with COUNT queries. On this post I&rsquo;m covering
some common tips for speeding up general queries.</p>

<p>We&rsquo;ll start by looking at some code.</p>

<pre><code class="ruby">#app/serializers/business_serializer.rb
class BusinessSerializer &lt; ActiveModel::Serializer
  attributes :name, :zip
end

#app/controllers/businesses_controller#any_ten_records
Business.where("revenue + ? = ?", params[:amount], 100).order(:created_at).to_a.first(10)
</code></pre>

<p>In the code above I use <a href="https://github.com/rails-api/active_model_serializers">ActiveModel::Serializers</a>
to describe which model attributes will be serialized into JSON. If you are unfamiliar
with this gem consider reading up on it. It&rsquo;s pretty handy for DRYing up your code. The
database I am using is PostgreSQL.</p>

<h2>Don&rsquo;t SELECT *</h2>

<pre><code class="ruby">
#Business.where("revenue + ? = ?", params[:amount], 100).order(:created_at).to_a.first(10)
Business.select(:name, :zip)
  .where("revenue + ? = ?", params[:amount], 100)
  .order(:created_at)
  .to_a
  .first(10)
</code></pre>

<p>The serailizer tells me that the only thing I need to return is <code>business#name</code>
and <code>business#zip</code>. The more record columns you request data on, the slower your
query might run as it will use more Network I/O and sometimes Disk I/O.
You could boost performance by selecting only the columns you require.</p>

<h2>Filter Rows With Limit</h2>

<pre><code class="ruby">
#Business.select(:name, :zip)
#  .where("revenue + ? = ?", params[:amount], 100)
#  .order(:created_at)
#  .to_a
#  .first(10)
Business.select(:name, :zip)
  .where("revenue + ? = ?", params[:amount], 100)
  .limit(10)
  .order(:created_at)
</code></pre>

<p>We can see from <code>#first(10)</code> that we are only interested in returning the first
ten records we fetched from the query. We could potentially and unnecessarily
request a huge record set and consume a ton of memory by instantiating those
records as ActiveRecord objects.</p>

<h2>Avoid Sorting</h2>

<pre><code class="ruby">
#Business.select(:name, :zip)
#  .where("revenue + ? = ?", params[:amount], 100)
#  .limit(10)
#  .order(:created_at)
Business.select(:name, :zip)
  .where("revenue + ? = ?", params[:amount], 100)
  .limit(10)
</code></pre>

<p>Sorting is sometimes unavoidable but we should try not to utilize it when
possible. The <code>ORDER BY</code> generated will consume sorting memory on the server.
In cases where memory becomes scarce on the server, it will spill over to
disk making it painfully slow.</p>

<h2>Don&rsquo;t Accidentally Skip Using an Index</h2>

<pre><code class="ruby">
#Business.select(:name, :zip)
#  .where("revenue + ? = ?", params[:amount], 100)
#  .limit(10)
Business.select(:name, :zip)
  .where("revenue = ? - ?", 100, params[:amount])
  .limit(10)
</code></pre>

<p>If the businesses table is using an index on the field revenue, the original code
would skip using the index. To take advantage of the index we need to shift the
calculation from the left hand side of the equation to the right hand side.</p>

<p>Thank you for coming by. Feel free to share and comment below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faster Count Queries]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/07/faster-count-queries/"/>
    <updated>2015-04-07T16:11:47-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/07/faster-count-queries</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/cheetah_still.jpg" width="150"></p>

<p>Some of you have noticed that PostgreSQL&rsquo;s count performs painfully slow on tables
of any significant size. If you&rsquo;re looking for a quick solution and you don&rsquo;t
care about super exact numbers on the count then I&rsquo;ll show you what I did.</p>

<p>The reason counts are so slow in postgres has to do with the way Multi-Version
Concurrency Control(MVCC) has been implemented in the
<a href="http://wiki.postgresql.org/wiki/Slow_Counting">product</a>. Since multiple transactions
can see different states of the data then there can be no straightforward way for &ldquo;COUNT(*)&rdquo;
to summarize data across the whole table. As a result postgres must walk through all rows
in a sense.</p>

<p>I found an interesting article on how to accomplish a much faster, although less accurate
count by tapping into the EXPLAIN output through a custom <a href="https://wiki.postgresql.org/wiki/Count_estimate">function</a>.
I&rsquo;ll walk you through the steps I took.</p>

<pre><code class="sql count_estimate function">CREATE FUNCTION count_estimate(query text) RETURNS integer AS
$func$
DECLARE
    rec   record;
    rows  integer;
BEGIN
    FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
        rows := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
        EXIT WHEN rows IS NOT NULL;
    END LOOP;

    RETURN rows;
END
$func$ LANGUAGE plpgsql;
</code></pre>

<p>Above is the create query for out SQL function that we&rsquo;ll need to create on the server.
First we&rsquo;ll create a migration to hold our function creation statement.</p>

<pre><code class="ruby migration">#run this at the console first
#  bundle exec rails g migration AddCountEstimateFunction


class AddCountEstimateFunction &lt; ActiveRecord::Migration
  def up
    execute &lt;&lt;-SQL
      CREATE FUNCTION count_estimate(query text) RETURNS integer AS
      $func$
      DECLARE
          rec   record;
          rows  integer;
      BEGIN
          FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
              rows := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
              EXIT WHEN rows IS NOT NULL;
          END LOOP;

          RETURN rows;
      END
      $func$ LANGUAGE plpgsql;
    SQL
  end

  def down
    execute "DROP FUNCTION count_estimate(query text);"
  end
end
</code></pre>

<p>After we run <code>bundle exec rake db:migrate</code> the function will be available for use.</p>

<pre><code class="ruby">ActiveRecord::Base.connection.execute("SELECT count_estimate('#{sql_query}')")

#Example:
#  sql_query = "SELECT * FROM businesses WHERE size &gt; 3"
#  ActiveRecord::Base.connection.execute("SELECT count_estimate('#{sql_query}')").to_a
#
#returns
#  [{"count_estimate" =&gt; "500"}]
</code></pre>

<p>The snippet above shows how you would now use this SQL function</p>

<pre><code class="ruby">class Business &lt; ActiveRecord::Base

  def comment_count
    #This will return an estimate but not exactly the real number
    ActiveRecord::Base.connection.execute("SELECT count_estimate('#{comments_sql_string}')").first["count_estimate"].to_i
  end  

  def comments_sql_string
    &lt;&lt;-SQL
      SELECT * FROM comments 
      WHERE comments.business_id = #{self.id} 
        AND comments.status = ''new''
    SQL
  end
end

#Business.last.comment_count
#
#=&gt; 9
</code></pre>

<p>Finally, here is a more fleshed out implementation. Just a note, but make sure you character escape
those single quotes by using two single quotes <code>''</code> otherwise you&rsquo;ll get a SQL error on the syntax.</p>

<p>If this was useful then please share on your social media connections. I also like hearing
any suggestions and comments so feel free to drop some below.</p>
]]></content>
  </entry>
  
</feed>
