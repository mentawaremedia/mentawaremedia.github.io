<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruby | Very Good Indicators]]></title>
  <link href="http://www.verygoodindicators.com/blog/tags/ruby/atom.xml" rel="self"/>
  <link href="http://www.verygoodindicators.com/"/>
  <updated>2015-04-29T01:18:48-05:00</updated>
  <id>http://www.verygoodindicators.com/</id>
  <author>
    <name><![CDATA[Mentaware Media]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Yet Another Article About Ruby Closures]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/28/yet-another-article-about-blocks/"/>
    <updated>2015-04-28T19:23:52-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/28/yet-another-article-about-blocks</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/closures_keyboard.jpg" width="300"></p>

<p>Today was the first day of company sponsored training on react.js, the new snazzy
js library by the fine folks at Facebook. Our instructor Ryan Florence was
apparently familiar with Ruby and quizzed me a bit on Procs and lambdas. I tend to use
blocks most often, lambdas quite infrequently and Procs very, very rarely.
As such I felt my knowledge of these deserved a little review and what better
way to review than to write a little article about the subject and share it
with all of you.</p>

<h2>Closures</h2>

<p>Ruby Blocks, Procs and lambdas are basically Ruby&rsquo;s implementation on closures.
If you&rsquo;re familiar with what a closure is, it&rsquo;s basically a piece of code that
is bound to the environment in which that piece of code was defined.</p>

<h2>Blocks</h2>

<p>Ruby blocks are syntax literals for Proc objects, defined as instructions
between curly braces <code>{}</code> or <code>do...end</code> phrases for multiline blocks which may
optionally take arguments and return values.</p>

<pre><code class="ruby Block Example">class Foo
  def run
    yield
  end
end

a = 10
b = 20

Foo.new.run do
  a + b
end
</code></pre>

<p>In the example given above on line 10 thru 12 we are creating a block. The block
consists of the code on line 11 along with it&rsquo;s environment. This block is sent over
to line 3 where it called implicitly by the <code>yield</code> statement.</p>

<h2>Procs</h2>

<p>Proc is short for procedure. A Proc is a encapsulation of code used to perform
a specific task. A way of thinking of Procs and their behavior is like this.</p>

<pre><code class="ruby Proc Example">class Foo
  def run(my_proc)
    my_proc.call
    puts "Ho"
  end
end

proc = Proc.new do
  puts "Hi"
  return
end

Foo.new.run(proc)

# Hi 

#==&gt; Equivalent To

class Bar
  def run
    puts "Hi"
    return
    puts "Ho"
  end
end

Bar.new.run

# Hi 
</code></pre>

<p>If a Proc contains a <code>return</code> it will do a hard <code>return</code> and exit completely out of
the method it called. As such <code>"Ho"</code> will never be printed to the console.</p>

<p>This makes sense since it is designed as encapulation of
a procedure. As you can see from the example above the Proc#call on line 3 is
functionally equivalent to line 21-22.</p>

<h2>Lambda</h2>

<p>Lambda get its name from lambda calculus. In this sense lambdas take the form
of anonymous functions.</p>

<pre><code class="ruby Lambda Example">class Foo
  def run(my_lam)
    my_lam.call
    puts "Ho"
  end
end

lam = lambda do
  puts "Hi"
  return
end

Foo.new.run(lam)

# Hi
# Ho

#==&gt; Equivalent To

class Bar
  def run
    lam
    puts "Ho"
  end

  def lam
    puts "Hi"
    return
  end
end

Bar.new.run
</code></pre>

<p>The difference between <code>Foo</code> and <code>Bar</code> is that <code>Foo#run</code> executes an anonymous
method defined by the lambda where as <code>Bar#run</code> executes the named method
<code>Bar#lam</code>.</p>

<p>The <code>return</code> statement in the lambda returns from the anonymous method just
as a <code>return</code> in a named method will return from that method. Thus it will not
exit out of the method in which it was invoked.</p>

<h2>Conclusion</h2>

<p>So I know I&rsquo;m skipping a whole bunch of stuff regrading Blocks, Procs and Lambdas
like parameter passing and appearance in argument lists but unfortunately I got
a late start on this article so I&rsquo;ll have to write some supplements to this
in the coming weeks.</p>

<p>Bye.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why ActiveRecord Sucks]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/20/why-activerecord-sucks/"/>
    <updated>2015-04-20T21:49:23-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/20/why-activerecord-sucks</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/aww-man-this-topics-sucks.jpg" width="300"></p>

<p>Ok, so I took an old play from the American media and used a sensationalized
title to get your attention. The fact is that I like ActiveRecord, I really do.
In fact I like it a little too much.</p>

<p>If you haven&rsquo;t done so you should read my last blog post titled <a href="http://www.verygoodindicators.com/blog/2015/04/19/easy-vs-simple/">&lsquo;Easy vs Simple&rsquo;</a>.
It&rsquo;s an article very much inspired by a <a href="http://www.infoq.com/presentations/Simple-Made-Easy">talk</a>
given by the creator of Clojure, Rich Hickey. The point my article and one of the many fine
points in Hickey&rsquo;s lecture attempts to make is that we as developers
have become obsessed with this idea of &lsquo;easy&rsquo;. So much are we enamored by it that
we&rsquo;re trading it in for a vast amount of complexity and inefficiency.</p>

<p>Giving you a little of my background, I&rsquo;ve had the pleasure working for two very
experienced and well known people in our profession. The first was Dave Thomas author
of the Pickaxe Book and Hal Helms who is very well known in the ColdFusion community.
I currently work for Hal and we have some fairly interesting discussions and arguements.
One revolves around ORMs. He is very  much of the opinion that we should not
use an ORM at all in Rails, at least he leans in that direction. While I am not such an
extremist, I have been tempering my enthusiasm for ActiveRecord with recent real world
experience dealing with performance issues.</p>

<h2>ActiveRecord is Fat</h2>

<p>How fat? When ActiveRecord sits around the house, it sits AROUND the house. I know bad
joke. Look, all the magic ActiveRecord does requires a significant amount
code which then leads to large amount of <a href="https://blog.engineyard.com/2009/thats-not-a-memory-leak-its-bloat/">memory</a>
used to spin up an instance. Spin up enough ActiveRecord instances that are not
garbage collected quick enough and the available memory on your box might be
all consumed.</p>

<p>ActiveRecord instances do a lot: persistence, validation, query generation, domain logic
and more. Yes it makes things easy and possibly makes code more readable but you&rsquo;re adding
complexity at least in the background. If you&rsquo;ve ever run into a new deep ActiveRecord bug,
good luck digging into that code for the first time.</p>

<h2>Your Classes Become Dependent on ActiveRecord</h2>

<p>Let compare two versions of code. One uses ActiveRecord, the other does not.</p>

<pre><code class="ruby With ActiveRecord">#app/service/foo.rb
class Foo 
  attributes :business

  #business is an ActiveRecord instance
  def initialize(business)
    @business = business
  end

  def run
    owners = business.owners

    owners.map(&amp;:name)
  end
end

#app/service/biz.rb
Foo.new(Business.find(1)).run
</code></pre>

<pre><code class="ruby Without ActiveRecord">#app/service/foo.rb
class Bar 
  attributes :owners

  #owners is an Array of Hashes
  def initialize(owners)
    @owners = owners
  end

  def run
    owners.map {|owner| owner["name"]}
  end
end

#app/service/biz.rb
Bar.new(Business.find(1).owners.map(&amp;:attributes)).run
</code></pre>

<p>The Foo class is dependent on ActiveRecord. In order to run my rspec
tests on this code I&rsquo;ll have to load rails. Foo also expects the business
object to respond to #owners and each instance of owner to respond to #name.
This is quite a bit that we&rsquo;re asking Foo to know about the business object.
Foo is also sensitive to changes made to Business as well such that if we chose
to drop or rename the association to owners, the class would break.
A good article related to this is <a href="https://pragprog.com/articles/tell-dont-ask">&ldquo;Tell, Don&rsquo;t Ask&rdquo;</a>
which warns about this type of inadvertent coupling.</p>

<p>What we should be sending Foo is data not an object containing data that then needs
to be queried through it&rsquo;s api. Yes, I know a Hash is still
an object but I&rsquo;m speaking semantically. As you can see, Bar is given a Hash only.
There is no dependency on rails so my test can be run without loading rails and thus
can be run much faster. We no longer have the coupling we witnessed before.</p>

<h2>ActiveRecord is Lousy at Generating SQL</h2>

<p>It&rsquo;s not the fault of ActiveRecord, ORMs all have their limits.
For simple queries it works fine. Realize though that as your queries become
more complex and intricate the worse the SQL will be that AR generates. There&rsquo;s
just no way an ORM can craft a highly optimized complex query better than an
experienced engineer.</p>

<p>A backwards thing I catch myself doing sometimes is mentally figuring out how a non-trivial
query would be crafted in SQL and then I try to rewrite it into AR. I think at that point
I should do it in SQL.</p>

<h2>ActiveRecord, not so readable</h2>

<pre><code class="ruby">class Report
  def execute
    result = ActiveRecord::Base.connection.execute(main_sql_string).to_a
  end

  #=&gt; Main Query
  def main_sql_string
    &lt;&lt;-SQL
      SELECT businesses.name AS business_name, 
        COALESCE(offer.name, format('Campaign ID - %s',offer.id::text)) AS campaign_name, 
        COALESCE(user_replied.count,0) AS user_replied_count,
      FROM businesses
      INNER JOIN offer
        ON businesses.id = offer.business_id
      LEFT OUTER JOIN (#{user_replied_sql_string}) user_replied
        ON offer.id = user_replied.offer_id
    SQL
  end

  #=&gt; Subqueries
  def user_replied_sql_string
    &lt;&lt;-SQL
      SELECT cc_links.offer_id AS offer_id, COUNT(*) AS count 
      FROM conversations
      INNER JOIN cc_links
        ON conversations.id = cc_links.conversation_id
      WHERE conversations.status = '#{Conversation::Status::REPLIED_TO}' 
      GROUP BY cc_links.offer_id
    SQL
  end
end
</code></pre>

<p>Take a look at code above. Can you imagine writing this in ActiveRecord. You&rsquo;d
have various calls to #joins, #group, #select, #from plus a fair share
of SQL fragments strewn about. For me the code above appears far more legible
that trying to express it in AR.</p>

<p>The last point I like to make is that I think there&rsquo;s an illness going around.
It might be caused by overzealous enthusiasm, inexperience or unwavering conviction.
But I&rsquo;ve seen it so many times; people become entranced with an ideal, rushing towards it
like a month to flame without the slightest thought to consequence or foresight. Again
I&rsquo;m a fan of ActiveRecord for the ease it brings but let&rsquo;s also consider the cost
as well.</p>

<p>Take Care.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips for Faster Queries]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/14/tips-for-faster-queries/"/>
    <updated>2015-04-14T19:54:54-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/14/tips-for-faster-queries</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/fast_snail.jpg" width="300"></p>

<p>For the last few weeks I&rsquo;ve been busy at work optimizing many of our
slowest queries. On my last Rails related post I covered a work around for
PostgreSQL&rsquo;s inherit slowness with COUNT queries. On this post I&rsquo;m covering
some common tips for speeding up general queries.</p>

<p>We&rsquo;ll start by looking at some code.</p>

<pre><code class="ruby">#app/serializers/business_serializer.rb
class BusinessSerializer &lt; ActiveModel::Serializer
  attributes :name, :zip
end

#app/controllers/businesses_controller#any_ten_records
Business.where("revenue + ? = ?", params[:amount], 100).order(:created_at).to_a.first(10)
</code></pre>

<p>In the code above I use <a href="https://github.com/rails-api/active_model_serializers">ActiveModel::Serializers</a>
to describe which model attributes will be serialized into JSON. If you are unfamiliar
with this gem consider reading up on it. It&rsquo;s pretty handy for DRYing up your code. The
database I am using is PostgreSQL.</p>

<h2>Don&rsquo;t SELECT *</h2>

<pre><code class="ruby">
#Business.where("revenue + ? = ?", params[:amount], 100).order(:created_at).to_a.first(10)
Business.select(:name, :zip)
  .where("revenue + ? = ?", params[:amount], 100)
  .order(:created_at)
  .to_a
  .first(10)
</code></pre>

<p>The serailizer tells me that the only thing I need to return is <code>business#name</code>
and <code>business#zip</code>. The more record columns you request data on, the slower your
query might run as it will use more Network I/O and sometimes Disk I/O.
You could boost performance by selecting only the columns you require.</p>

<h2>Filter Rows With Limit</h2>

<pre><code class="ruby">
#Business.select(:name, :zip)
#  .where("revenue + ? = ?", params[:amount], 100)
#  .order(:created_at)
#  .to_a
#  .first(10)
Business.select(:name, :zip)
  .where("revenue + ? = ?", params[:amount], 100)
  .limit(10)
  .order(:created_at)
</code></pre>

<p>We can see from <code>#first(10)</code> that we are only interested in returning the first
ten records we fetched from the query. We could potentially and unnecessarily
request a huge record set and consume a ton of memory by instantiating those
records as ActiveRecord objects.</p>

<h2>Avoid Sorting</h2>

<pre><code class="ruby">
#Business.select(:name, :zip)
#  .where("revenue + ? = ?", params[:amount], 100)
#  .limit(10)
#  .order(:created_at)
Business.select(:name, :zip)
  .where("revenue + ? = ?", params[:amount], 100)
  .limit(10)
</code></pre>

<p>Sorting is sometimes unavoidable but we should try not to utilize it when
possible. The <code>ORDER BY</code> generated will consume sorting memory on the server.
In cases where memory becomes scarce on the server, it will spill over to
disk making it painfully slow.</p>

<h2>Don&rsquo;t Accidentally Skip Using an Index</h2>

<pre><code class="ruby">
#Business.select(:name, :zip)
#  .where("revenue + ? = ?", params[:amount], 100)
#  .limit(10)
Business.select(:name, :zip)
  .where("revenue = ? - ?", 100, params[:amount])
  .limit(10)
</code></pre>

<p>If the businesses table is using an index on the field revenue, the original code
would skip using the index. To take advantage of the index we need to shift the
calculation from the left hand side of the equation to the right hand side.</p>

<p>Thank you for coming by. Feel free to share and comment below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faster Count Queries]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/07/faster-count-queries/"/>
    <updated>2015-04-07T16:11:47-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/07/faster-count-queries</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/cheetah_still.jpg" width="150"></p>

<p>Some of you have noticed that PostgreSQL&rsquo;s count performs painfully slow on tables
of any significant size. If you&rsquo;re looking for a quick solution and you don&rsquo;t
care about super exact numbers on the count then I&rsquo;ll show you what I did.</p>

<p>The reason counts are so slow in postgres has to do with the way Multi-Version
Concurrency Control(MVCC) has been implemented in the
<a href="http://wiki.postgresql.org/wiki/Slow_Counting">product</a>. Since multiple transactions
can see different states of the data then there can be no straightforward way for &ldquo;COUNT(*)&rdquo;
to summarize data across the whole table. As a result postgres must walk through all rows
in a sense.</p>

<p>I found an interesting article on how to accomplish a much faster, although less accurate
count by tapping into the EXPLAIN output through a custom <a href="https://wiki.postgresql.org/wiki/Count_estimate">function</a>.
I&rsquo;ll walk you through the steps I took.</p>

<pre><code class="sql count_estimate function">CREATE FUNCTION count_estimate(query text) RETURNS integer AS
$func$
DECLARE
    rec   record;
    rows  integer;
BEGIN
    FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
        rows := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
        EXIT WHEN rows IS NOT NULL;
    END LOOP;

    RETURN rows;
END
$func$ LANGUAGE plpgsql;
</code></pre>

<p>Above is the create query for out SQL function that we&rsquo;ll need to create on the server.
First we&rsquo;ll create a migration to hold our function creation statement.</p>

<pre><code class="ruby migration">#run this at the console first
#  bundle exec rails g migration AddCountEstimateFunction


class AddCountEstimateFunction &lt; ActiveRecord::Migration
  def up
    execute &lt;&lt;-SQL
      CREATE FUNCTION count_estimate(query text) RETURNS integer AS
      $func$
      DECLARE
          rec   record;
          rows  integer;
      BEGIN
          FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
              rows := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
              EXIT WHEN rows IS NOT NULL;
          END LOOP;

          RETURN rows;
      END
      $func$ LANGUAGE plpgsql;
    SQL
  end

  def down
    execute "DROP FUNCTION count_estimate(query text);"
  end
end
</code></pre>

<p>After we run <code>bundle exec rake db:migrate</code> the function will be available for use.</p>

<pre><code class="ruby">ActiveRecord::Base.connection.execute("SELECT count_estimate('#{sql_query}')")

#Example:
#  sql_query = "SELECT * FROM businesses WHERE size &gt; 3"
#  ActiveRecord::Base.connection.execute("SELECT count_estimate('#{sql_query}')").to_a
#
#returns
#  [{"count_estimate" =&gt; "500"}]
</code></pre>

<p>The snippet above shows how you would now use this SQL function</p>

<pre><code class="ruby">class Business &lt; ActiveRecord::Base

  def comment_count
    #This will return an estimate but not exactly the real number
    ActiveRecord::Base.connection.execute("SELECT count_estimate('#{comments_sql_string}')").first["count_estimate"].to_i
  end  

  def comments_sql_string
    &lt;&lt;-SQL
      SELECT * FROM comments 
      WHERE comments.business_id = #{self.id} 
        AND comments.status = ''new''
    SQL
  end
end

#Business.last.comment_count
#
#=&gt; 9
</code></pre>

<p>Finally, here is a more fleshed out implementation. Just a note, but make sure you character escape
those single quotes by using two single quotes <code>''</code> otherwise you&rsquo;ll get a SQL error on the syntax.</p>

<p>If this was useful then please share on your social media connections. I also like hearing
any suggestions and comments so feel free to drop some below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binding Object Intro]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/01/binding-object-intro/"/>
    <updated>2015-04-01T18:04:49-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/01/binding-object-intro</id>
    <content type="html"><![CDATA[<p>The following is a quick intro to Ruby&rsquo;s Binding object. The Binding object
holds the execution context of that particular scope. You can evaluate
variables against a particular binding to fetch or set the values of those
variables. Let&rsquo;s look at some code and then walkthrough what is happening.</p>

<p>What we&rsquo;re going to do in the following piece of code is capture the local
variables within the scope of Foo#run and send them to our error reporting
service which simply puts out the results to the console. In this example I am
using Ruby version 2.2.1.</p>

<pre><code class="ruby Binding object example">class Foo
  def run
    fruit = "apple"
    vegi  = "corn"
    nut   = "peanut"

    begin
      raise 
    rescue =&gt; e
      report_error(capture_variables(binding, [:e]))
    end
  end

  protected

  #error reporting service
  def report_error(var_hash)
    puts var_hash
  end

  def capture_variables(previous_binding, skip_vars = [])
    #                    -- returns [:fruit, :vegi, :nut, :e]
    #                   / 
    previous_binding.local_variables.inject({}) do |hash,var|
      begin
        # Binding#local_variable_get will fetch the value of the local variable
        #   for example Binding#local_variable_get(:fruit) returns "apple"
        hash.merge!(var =&gt; previous_binding.local_variable_get(var)) unless skip_vars.include?(var)
      rescue NameError
        #We rescue NameError due to a weird artifact that raise creates.
        #The artifact appears to be a local variable but 'raises' an error
        #  when any attempt to evaluate it occurs.
      end

      hash
    end
  end

end
</code></pre>

<p>If you notice on lines 3-4, we&rsquo;ve set a few local variables. On line 8, we
intentionally raise an error. Line 10 sends our reporting service a hash
containing all variables in that scope with their values. The hash is
generated by the method #capture_variables.</p>

<p>Here&rsquo;s how the method works. We send it the current binding by simply sending it
&lsquo;binding&rsquo; as seen on line 10. We also send it an array of symbols representing any local
variables we&rsquo;re not interested in reporting which in our case is &lsquo;e&rsquo;.</p>

<p>On line 22 we call Binding#local_variables which returns an array of symbols
representing the local variables we defined. We iterate over the collection
of symbols with #inject so as to build a hash with the keys being the
variable names and the values the variable values.</p>

<p>On line 27 we call Binding#local_variable_get to fetch the value of the local
variable as defined in previous execution context. Now we execute Foo.new.run to
see what we get.</p>

<pre><code class="irb Console Output ">&gt;&gt; Foo.new.run
&gt;&gt; {:fruit=&gt;"apple", :vegi=&gt;"corn", :nut=&gt;"peanut"}
&gt;&gt; nil
</code></pre>

<p>As you can see above our reporting service is receiving the hash as expected.</p>

<p>Feel free to drop some comments or questions below. And if you liked it then
please share on twitter, facebook or your prefered social media channel.</p>
]]></content>
  </entry>
  
</feed>
