<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Binding Object | Very Good Indicators]]></title>
  <link href="http://www.verygoodindicators.com/blog/tags/binding-object/atom.xml" rel="self"/>
  <link href="http://www.verygoodindicators.com/"/>
  <updated>2015-05-06T01:03:37-05:00</updated>
  <id>http://www.verygoodindicators.com/</id>
  <author>
    <name><![CDATA[Mentaware Media]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Binding Object Intro]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/01/binding-object-intro/"/>
    <updated>2015-04-01T18:04:49-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/01/binding-object-intro</id>
    <content type="html"><![CDATA[<p>The following is a quick intro to Ruby&rsquo;s Binding object. The Binding object
holds the execution context of that particular scope. You can evaluate
variables against a particular binding to fetch or set the values of those
variables. Let&rsquo;s look at some code and then walkthrough what is happening.</p>

<p>What we&rsquo;re going to do in the following piece of code is capture the local
variables within the scope of Foo#run and send them to our error reporting
service which simply puts out the results to the console. In this example I am
using Ruby version 2.2.1.</p>

<pre><code class="ruby Binding object example">class Foo
  def run
    fruit = "apple"
    vegi  = "corn"
    nut   = "peanut"

    begin
      raise 
    rescue =&gt; e
      report_error(capture_variables(binding, [:e]))
    end
  end

  protected

  #error reporting service
  def report_error(var_hash)
    puts var_hash
  end

  def capture_variables(previous_binding, skip_vars = [])
    #                    -- returns [:fruit, :vegi, :nut, :e]
    #                   / 
    previous_binding.local_variables.inject({}) do |hash,var|
      begin
        # Binding#local_variable_get will fetch the value of the local variable
        #   for example Binding#local_variable_get(:fruit) returns "apple"
        hash.merge!(var =&gt; previous_binding.local_variable_get(var)) unless skip_vars.include?(var)
      rescue NameError
        #We rescue NameError due to a weird artifact that raise creates.
        #The artifact appears to be a local variable but 'raises' an error
        #  when any attempt to evaluate it occurs.
      end

      hash
    end
  end

end
</code></pre>

<p>If you notice on lines 3-4, we&rsquo;ve set a few local variables. On line 8, we
intentionally raise an error. Line 10 sends our reporting service a hash
containing all variables in that scope with their values. The hash is
generated by the method #capture_variables.</p>

<p>Here&rsquo;s how the method works. We send it the current binding by simply sending it
&lsquo;binding&rsquo; as seen on line 10. We also send it an array of symbols representing any local
variables we&rsquo;re not interested in reporting which in our case is &lsquo;e&rsquo;.</p>

<p>On line 22 we call Binding#local_variables which returns an array of symbols
representing the local variables we defined. We iterate over the collection
of symbols with #inject so as to build a hash with the keys being the
variable names and the values the variable values.</p>

<p>On line 27 we call Binding#local_variable_get to fetch the value of the local
variable as defined in previous execution context. Now we execute Foo.new.run to
see what we get.</p>

<pre><code class="irb Console Output ">&gt;&gt; Foo.new.run
&gt;&gt; {:fruit=&gt;"apple", :vegi=&gt;"corn", :nut=&gt;"peanut"}
&gt;&gt; nil
</code></pre>

<p>As you can see above our reporting service is receiving the hash as expected.</p>

<p>Feel free to drop some comments or questions below. And if you liked it then
please share on twitter, facebook or your prefered social media channel.</p>
]]></content>
  </entry>
  
</feed>
