<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Programming | Very Good Indicators]]></title>
  <link href="http://www.verygoodindicators.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://www.verygoodindicators.com/"/>
  <updated>2015-04-03T09:47:32-05:00</updated>
  <id>http://www.verygoodindicators.com/</id>
  <author>
    <name><![CDATA[Mentaware Media]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Binding Object Intro]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/01/binding-object-intro/"/>
    <updated>2015-04-01T18:04:49-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/01/binding-object-intro</id>
    <content type="html"><![CDATA[<p>The following is a quick intro to Ruby&rsquo;s Binding object. The Binding object
holds the execution context of that particular scope. You can evaluate
variables against a particular binding to fetch or set the values of those
variables. Let&rsquo;s look at some code and then walkthrough what is happening.</p>

<p>What we&rsquo;re going to do in the following piece of code is capture the local
variables within the scope of Foo#run and send them to our error reporting
service which simply puts out the results to the console. In this example I am
using Ruby version 2.2.1.</p>

<pre><code class="ruby Binding object example">class Foo
  def run
    fruit = "apple"
    vegi  = "corn"
    nut   = "peanut"

    begin
      raise 
    rescue =&gt; e
      report_error(capture_variables(binding, [:e]))
    end
  end

  protected

  #error reporting service
  def report_error(var_hash)
    puts var_hash
  end

  def capture_variables(previous_binding, skip_vars = [])
    #                    -- returns [:fruit, :vegi, :nut, :e]
    #                   / 
    previous_binding.local_variables.inject({}) do |hash,var|
      begin
        # Binding#local_variable_get will fetch the value of the local variable
        #   for example Binding#local_variable_get(:fruit) returns "apple"
        hash.merge!(var =&gt; previous_binding.local_variable_get(var)) unless skip_vars.include?(var)
      rescue NameError
        #We rescue NameError due to a weird artifact that raise creates.
        #The artifact appears to be a local variable but 'raises' an error
        #  when any attempt to evaluate it occurs.
      end

      hash
    end
  end

end
</code></pre>

<p>If you notice on lines 3-4, we&rsquo;ve set a few local variables. On line 8, we
intentionally raise an error. Line 10 sends our reporting service a hash
containing all variables in that scope with their values. The hash is
generated by the method #capture_variables.</p>

<p>Here&rsquo;s how the method works. We send it the current binding by simply sending it
&lsquo;binding&rsquo; as seen on line 10. We also send it an array of symbols representing any local
variables we&rsquo;re not interested in reporting which in our case is &lsquo;e&rsquo;.</p>

<p>On line 22 we call Binding#local_variables which returns an array of symbols
representing the local variables we defined. We iterate over the collection
of symbols with #inject so as to build a hash with the keys being the
variable names and the values the variable values.</p>

<p>On line 27 we call Binding#local_variable_get to fetch the value of the local
variable as defined in previous execution context. Now we execute Foo.new.run to
see what we get.</p>

<pre><code class="irb Console Output ">&gt;&gt; Foo.new.run
&gt;&gt; {:fruit=&gt;"apple", :vegi=&gt;"corn", :nut=&gt;"peanut"}
&gt;&gt; nil
</code></pre>

<p>As you can see above our reporting service is receiving the hash as expected.</p>

<p>Feel free to drop some comments or questions below. And if you liked it then
please share on twitter, facebook or your prefered social media channel.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Class Class]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/03/20/class-class/"/>
    <updated>2015-03-20T20:53:35-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/03/20/class-class</id>
    <content type="html"><![CDATA[<p>This will post will be short and sweet; we&rsquo;ll cover the Ruby class Class. For
those unfamiliar with the class called Class, it is basically a Ruby object for creating
Ruby classes. This comes in very handy when doing metaprogramming or writing code that
generates code.</p>

<pre><code class="ruby Typical Way of Creating a class">class Foo
  def hey
    "hey"
  end
end
</code></pre>

<p>Above you&rsquo;ll see the regular old way of creating a class in Ruby.</p>

<pre><code class="ruby Class Way of Creating a class">Foo = Class.new do
  def hey
    "hey"
  end
end
</code></pre>

<p>You can do the exact same thing using Class as the example above shows. Subclassing
can also be done very easily.</p>

<pre><code class="ruby Typical Way of Subclassing">class Bar &lt; Foo

end
</code></pre>

<p>Above is how one would typically do subclassing. Class Bar inherits from class Foo.</p>

<pre><code class="ruby Class Way of Subclassing">Bar = Class.new(Foo)
</code></pre>

<p>And here is how it&rsquo;s accomplished with class Class.</p>

<p>A usual situation where I use Class is when I need to create custom errors. I think
we can all be code snobs from time to time (I hope it&rsquo;s not just me) so I maybe overly
critical when I say the following. When people attempt to cram multiple lines of ruby
code on one line using &lsquo;;&rsquo;, a little piece of my dies.</p>

<pre><code class="ruby ...kill me now">class NameNotDefined &lt; RuntimeError; end
</code></pre>

<p>Is it just me or is the above just painful to look at?</p>

<pre><code class="ruby A blissful expression">NameNotDefined = Class.new(RuntimeError)
</code></pre>

<p>Now isn&rsquo;t this so much better? I can now relax.</p>

<p>I hope it&rsquo;s been educational. Feel free to drop some comments or questions below. And if you liked it then
please share on twitter, facebook or your prefered social media channel.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Constructors]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/03/15/ruby-contructors/"/>
    <updated>2015-03-15T13:24:08-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/03/15/ruby-contructors</id>
    <content type="html"><![CDATA[<pre><code class="vb.net Visual Basic .NET">'Visual Basic .NET
Dim sf As BaseballTeam = New BaseballTeam("San Francisco Giants")

'Dim - Allocates space for one or more variables
'As  - Identifies a data type in a declaration
'New - Creates a new object instace
</code></pre>

<pre><code class="ruby Ruby">#Ruby
sf = BaseballTeam.new("San Francisco Giants")

#Ruby is not strictly typed so there's no need to identify the data type.
#Object.new is a class method which allocates space and create an instance of the class.
</code></pre>

<p>Many languages use a &lsquo;new&rsquo; keyword which Ruby does not have to create an object instance.
Ruby instead provides a method &lsquo;new&rsquo; which is called directly on a class.</p>

<h2>Ruby Constructor Responsibilities</h2>

<p>The Ruby Constructor has three jobs.</p>

<ul>
<li>It allocates space for the object</li>
<li>It assigns instances variables their initial values</li>
<li>It returns the instance of that class</li>
</ul>


<pre><code class="ruby Ruby Constructor Responsibilities">class Foo
  def initialize(bar, biz)
    @bar = bar
    @biz = biz
  end
end

foo = Foo.new("a", "b")
</code></pre>

<p>Wait a second!? Why are we talking about &lsquo;initialize&rsquo; all of a sudden?
I thought we were talking about &lsquo;new&rsquo;?</p>

<h2>#initialize vs .new</h2>

<pre><code class="ruby #initialize vs .new">class Foo 
#         /-- defined as an instance method
#        /
  def initialize(bar, biz)
    @bar = bar
    @biz = biz
  end
end

#           /-- called on the class thus it's a class method
#          /
foo = Foo.new("a", "b")
</code></pre>

<ul>
<li>#initialize is an instance method</li>
<li>.new is a class method</li>
</ul>


<p>To clarify, .new is the ruby constructor not the instance method #initialize. Remember,
the constructor performs three actions.</p>

<ul>
<li>It allocates space for a new instance of the class</li>
<li>It assigns instances variables their initial values</li>
<li>It returns the instance of that class</li>
</ul>


<p>The class method .new performs these actions, not #initialize which is used for
assigning instances variables their initial values.</p>

<p>We can implement our own version of the .new method to illustrate how it might
accomplish this.</p>

<pre><code class="ruby Ruby">class Foo
  def self.new_object(*args)

#                  /-- allocates a new instance of the class.
#                 /    It does not call initialize
    instance = allocate

#         /-- pass the arguments over to #initialize in order to 
#        /    to set instance variables
    instance.send(:initialize, *args)

#       /-- return the instance of this class    
    instance
  end

  def initialize(bar, biz)
    @bar = bar
    @biz = biz
  end
end
</code></pre>

<pre><code class="irb Console Output ">#                                   /- as you can see the standard .new method and
#                                  /   our implementation both return instances of the
#                                 /    class and set the instance variables
&gt;&gt; Foo.new(1,2)        #=&gt; #&lt;Foo:0x007fac3e15d0a0 @bar=1, @biz=2&gt;
&gt;&gt; Foo.new_object(1,2) #=&gt; #&lt;Foo:0x007fac3e206420 @bar=1, @biz=2&gt;
</code></pre>

<p>As you can see above, our own custom constructor is functionally equivalent
to the default constructor. Both constructors return an instance of class Foo
with their instance variables set. This knowledge can help us do some pretty neat things.</p>

<h2>Constructor overloading&hellip;sort of</h2>

<pre><code class="vb.net Constructor overloading in Visual Basic .NET">Public Class Vehicle
    Private m_Wheels As Integer

'        /- default constructor
    Sub New()                                  
        m_Wheels = 4
    End Sub

'        /- overloaded constructor
    Sub New(ByVal NumberOfWheels As Integer)   
        m_Wheels = NumberOfWheels
    End Sub

    Public Property NumberOfWheels()
        Get
            Return m_Wheels
        End Get
        Set(ByVal Value)
            m_Wheels = Value
        End Set
    End Property

End Class
</code></pre>

<p>One of the things I used to miss when I started working in Ruby was the ability to
overload constructors. Strictly speaking, overloading uses the same constructor
method name but uses a different signature or parameter list which you can&rsquo;t do in
Ruby.</p>

<pre><code class="ruby Overloading constructors in Ruby">class Circle
  attr_accessor :radius, :area

  #=&gt; Custom Constructors
  def self.new_by_radius(*args)
    circle = allocate
    circle.init_radius(*args)
    circle
  end

  def self.new_by_area(*args)
    circle = allocate
    circle.init_area(*args)
    circle    
  end

  #=&gt; Custom Initializers
  def init_radius(_radius)
    @radius = _radius * 1.0
    @area = 3.14 * (@radius ** 2)
  end

  def init_area(_area)
    @area = _area * 1.0
    @radius = Math.sqrt(@area / 3.14)
  end
end
</code></pre>

<pre><code class="irb Console Output ">&gt;&gt; Circle.new_by_radius(10) #=&gt; #&lt;Circle:0x007fe77523d598 @radius=10.0, @area=314.0&gt;
&gt;&gt; Circle.new_by_area(314)  #=&gt; #&lt;Circle:0x007fe7752e6f08 @radius=10.0, @area=314.0&gt;
</code></pre>

<p>We can accomplish a similar goal by creating our own custom constructors.
Then we can see our custom constructors in action above.</p>

<h2>Summary</h2>

<p>The ruby constructor performs 3 jobs; allocates space, assigns
instance variables and returns the instance. The method .new is a class method and
constructor; #initialize is an instance method used to assign instance variables.
You can write your own constructors for fun and profit.</p>

<p>Feel free to drop some comments or questions below. And if you liked it then
please share on twitter, facebook or your prefered social media channel.</p>
]]></content>
  </entry>
  
</feed>
