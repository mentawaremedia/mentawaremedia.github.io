<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Very Good Indicators]]></title>
  <link href="http://www.verygoodindicators.com/atom.xml" rel="self"/>
  <link href="http://www.verygoodindicators.com/"/>
  <updated>2015-05-06T01:03:37-05:00</updated>
  <id>http://www.verygoodindicators.com/</id>
  <author>
    <name><![CDATA[Mentaware Media]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The &amp; Operator]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/05/05/the-and-operator/"/>
    <updated>2015-05-05T23:11:31-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/05/05/the-and-operator</id>
    <content type="html"><![CDATA[<p>The post builds on my last blog post <a href="http://www.verygoodindicators.com/blog/2015/04/28/yet-another-article-about-blocks/">&lsquo;Yet Another Article About Ruby Closures&rsquo;</a>.
We&rsquo;re going to take a quick peek into the &lsquo;&amp;&rsquo; operator as it applies to ruby blocks.
Let&rsquo;s take a look at some code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="o">&amp;</span><span class="n">blk</span><span class="p">)</span>
</span><span class='line'>    <span class="n">blk</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">run</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;I ran!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#I ran!</span>
</span></code></pre></td></tr></table></div></figure>


<p>In when <code>&amp;</code> appears in front of an object as in <code>&amp;blk</code>, it can do one of three
things:</p>

<ul>
<li>if the object is a block, it&rsquo;ll convert it into a simple proc</li>
<li>if the object is a Proc, it&rsquo;ll convert it into a block</li>
<li>if the object is not a block nor Proc, it&rsquo;ll call #to_proc on the object.</li>
</ul>


<p>In our example above <code>&amp;blk</code> is converting the block <code>puts "I ran!"</code> into a simple
proc and assigning it to the variable <code>blk</code> which we can then invoke by calling <code>#call</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span><span class="nb">puts</span> <span class="s2">&quot;I ran!&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="o">&amp;</span><span class="nb">proc</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#I ran!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, in the example above, I first create a Proc and assign it to the variable <code>proc</code>.
Then I convert it to a block with <code>&amp;</code> and pass it to <code>Foo#run</code>.</p>

<p>On the next post I&rsquo;ll cover Symbol to proc which covers our last condition where
<code>#to_proc</code> is called on the object.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The User Experience]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/05/03/the-user-experience/"/>
    <updated>2015-05-03T15:26:07-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/05/03/the-user-experience</id>
    <content type="html"><![CDATA[<blockquote><p>&#8220;User experience&#8221; encompasses all aspects of the end-user&#8217;s interaction <br/>with the company, its services, and its products.</p><footer><strong>JAKOB NIELSEN and DON NORMAN</strong></footer></blockquote>


<p><img class="right" src="http://www.verygoodindicators.com/images/ux-badge.png" width="200"></p>

<p>Over the last couple of the months the company where I am currently employed has
sponsored company wide UX training through the Nielsen Norman Group(NN/g). I also
passed the examinations and I am now UX
Certified(<a href="http://www.nngroup.com/ux-certification#track.">UXC#1007600</a>)</p>

<p>NN/g is at the fore front of evidence based User Experience research. As a software
developer, I found it very sobering that what I and my other fellow coworkers
were building may not be all that comprehensible to the end user of the systems we
engineered. However, this problem was not unique to us. In fact companies such
as Pizza Hut, Amazon, Chipotle and others struggle with it all the time.</p>

<p>Anytime a user experiences frustration or confusion using or ordering a product,
you run a high probability of never seeing them again. We don&rsquo;t set out to build
products that are difficult to use. We want our customers to experience success
and return to us with future business again and again.</p>

<p>Unfortunately the individuals building a product are too close to and too familiar
with the product to realize the difficulties apparent in its use. A creator will
place controls in a certain order and position. Since he has spent so much time
crafting and wiring those controls; what they do will be second nature to him. He
could very well know what each does with no need of labels or cues. However,
another may find these controls counter intuitive and confusing. The order of things
makes no sense and they do not do what he expects.</p>

<p>Another issue is creator pride which blinds us to the faults present. There are
times when we might create something like a piece of art, a dish to eat or another
creation. As the creator we might be blind to poor composition of the art work or the
lack of flavor in a meal which is so apparent to another.</p>

<p>For this reason its important to validate what we build. We must seek out the
brutally honest opinion of the end consumer, of the end user. Does he enjoy using
the product? Does he find it confusing? The way these sort of tests
are conducted so as to obtain statistically valid and actionable results without
influencing the subject is at the core of NN/g training.</p>

<p>Lets view a couple of videos.</p>

<div style="text-align:center;">
<iframe width="560" height="315" src="https://www.youtube.com/embed/nBUWxROnqwA" frameborder="0" allowfullscreen></iframe>
</div>


<p>The Ring was a Kickstarter funded project with great promises to control all sorts
of other electronic devices through various hand gestures. The reviewer really digs
into them hard for what he perceived as an incredibly poor user experience. He
found the product difficult to use, failing incredibly in delivering its promise.</p>

<p>Takuro Yoshida, the Ring creator, responded to the harsh reviews of his
<a href="https://www.techinasia.com/ring-kickstarter-wearable-ceo-responds-to-criticism/">product</a>.
From the interview, it does appear that there is a user experience disconnect at the
very least with a portion of Ring users. If you read the interview you&rsquo;ll notice this
statement by the interviewer.</p>

<blockquote><p>Yoshida passed me his ring and I was able to learn six gestures in a matter of minutes. Without his instruction, I probably wouldnâ€™t have realized that I was flicking my wrist too much (you should only move your finger) or moving too much after completing a gesture (you have to hold still for a moment for the gesture to register).</p></blockquote>


<p>This seems to indicate that indeed the product is just not that intuitive to
some people. I hope the company manages to address these issues whether actual
or just perceived. I can see how the idea of controlling your electronics
through hand gestures can be very appealing.</p>

<p>Well, I hope you&rsquo;ve enjoyed this. Till next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TGIF 5]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/30/tgif-5/"/>
    <updated>2015-04-30T22:34:56-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/30/tgif-5</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://www.verygoodindicators.com/images/tgif5.jpg" width="400"></p>

<p>We it&rsquo;s finally here. If you&rsquo;re a Marvel fan boy or just loved the Avengers and
have been anticipating Avengers 2 well it&rsquo;s finally out in theaters today in the
USA.</p>

<p>You may have also heard of the eventual movies Infinity War Part I &amp; II. If you
also saw Guardians of the Galaxy you&rsquo;ll remember talk about the Infinity Stones.
This set following set of videos will hopefully clear up some things and fill in the gaps
as to where the Marvel movies are heading in regards to all this noise.</p>

<div style="text-align:center;">
<iframe width="560" height="315" src="https://www.youtube.com/embed/MKbsIOagLkE?list=PLkU8R8coCrLdfGVt4uZzQxXycbNX4DwVh" frameborder="0" allowfullscreen></iframe>
</div>


<p>This following series of videos covers everthing you want to know about the
Infinity Stones (Gems) and Thanos in the Marvel Universe.</p>

<div style="text-align:center;">
<iframe width="560" height="315" src="https://www.youtube.com/embed/3e940DgnBUg" frameborder="0" allowfullscreen></iframe>
</div>


<p>Of course in the Marvel Cinematic Universe a few things have been tweaked in regards
to the Inifinity Stones(Gems).This video covers who made the Infinity Stones in
the movies.</p>

<p>Alright Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yet Another Article About Ruby Closures]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/28/yet-another-article-about-blocks/"/>
    <updated>2015-04-28T19:23:52-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/28/yet-another-article-about-blocks</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://www.verygoodindicators.com/images/closures_keyboard.jpg" width="300"></p>

<p>Today was the first day of company sponsored training on react.js, the new snazzy
js library by the fine folks at Facebook. Our instructor Ryan Florence was
apparently familiar with Ruby and quizzed me a bit on Procs and lambdas. I tend to use
blocks most often, lambdas quite infrequently and Procs very, very rarely.
As such I felt my knowledge of these deserved a little review and what better
way to review than to write a little article about the subject and share it
with all of you.</p>

<h2>Closures</h2>

<p>Ruby Blocks, Procs and lambdas are basically Ruby&rsquo;s implementation on closures.
If you&rsquo;re familiar with what a closure is, it&rsquo;s basically a piece of code that
is bound to the environment in which that piece of code was defined.</p>

<h2>Blocks</h2>

<p>Ruby blocks are syntax literals for Proc objects, defined as instructions
between curly braces <code>{}</code> or <code>do...end</code> phrases for multiline blocks which may
optionally take arguments and return values.</p>

<figure class='code'><figcaption><span>Block Example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>    <span class="k">yield</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">run</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the example given above on line 10 thru 12 we are creating a block. The block
consists of the code on line 11 along with it&rsquo;s environment. This block is sent over
to line 3 where it called implicitly by the <code>yield</code> statement.</p>

<h2>Procs</h2>

<p>Proc is short for procedure. A Proc is a encapsulation of code used to perform
a specific task. A way of thinking of Procs and their behavior is like this.</p>

<figure class='code'><figcaption><span>Proc Example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">my_proc</span><span class="p">)</span>
</span><span class='line'>    <span class="n">my_proc</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Ho&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Hi&quot;</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="nb">proc</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Hi </span>
</span><span class='line'>
</span><span class='line'><span class="c1">#==&gt; Equivalent To</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Hi&quot;</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Ho&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Bar</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Hi </span>
</span></code></pre></td></tr></table></div></figure>


<p>If a Proc contains a <code>return</code> it will do a hard <code>return</code> and exit completely out of
the method it called. As such <code>"Ho"</code> will never be printed to the console.</p>

<p>This makes sense since it is designed as encapulation of
a procedure. As you can see from the example above the Proc#call on line 3 is
functionally equivalent to line 21-22.</p>

<h2>Lambda</h2>

<p>Lambda get its name from lambda calculus. In this sense lambdas take the form
of anonymous functions.</p>

<figure class='code'><figcaption><span>Lambda Example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">my_lam</span><span class="p">)</span>
</span><span class='line'>    <span class="n">my_lam</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Ho&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">lam</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Hi&quot;</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">lam</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Hi</span>
</span><span class='line'><span class="c1"># Ho</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#==&gt; Equivalent To</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>    <span class="n">lam</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Ho&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">lam</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Hi&quot;</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Bar</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>


<p>The difference between <code>Foo</code> and <code>Bar</code> is that <code>Foo#run</code> executes an anonymous
method defined by the lambda where as <code>Bar#run</code> executes the named method
<code>Bar#lam</code>.</p>

<p>The <code>return</code> statement in the lambda returns from the anonymous method just
as a <code>return</code> in a named method will return from that method. Thus it will not
exit out of the method in which it was invoked.</p>

<h2>Conclusion</h2>

<p>So I know I&rsquo;m skipping a whole bunch of stuff regrading Blocks, Procs and Lambdas
like parameter passing and appearance in argument lists but unfortunately I got
a late start on this article so I&rsquo;ll have to write some supplements to this
in the coming weeks.</p>

<p>Bye.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Problem Solving for Everyday Life]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/26/problem-solving-for-everyday-life/"/>
    <updated>2015-04-26T13:31:47-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/26/problem-solving-for-everyday-life</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://www.verygoodindicators.com/images/confusion_scrabble.jpg" width="300"></p>

<p>I was going to name this article, &ldquo;Algebra for everyday problem solving,&rdquo; but
I was concerned many people would assume this had to do with figuring out the
speed of a train having left the station two hours ago. Well, that&rsquo;s not what this
all about. Instead it&rsquo;s much more interesting.</p>

<p>Lets look at some basic algebra and then I&rsquo;ll elaborate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">10</span> <span class="o">+</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">12</span>
</span><span class='line'>
</span><span class='line'><span class="n">therefore</span>
</span><span class='line'>
</span><span class='line'><span class="mi">10</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">=</span> <span class="mi">12</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we look at the problem on line 1 above, we see that at first we don&rsquo;t know what &lsquo;x&rsquo; is.
What we do know is that 10 plus that value will yield us 12. So it&rsquo;s very easy to then determine
that &lsquo;x&rsquo; is in fact equal to &lsquo;2&rsquo;. So what just happened here?</p>

<p>What happened is that we had an unknown (x), two knowns (10 and 12) and an
established relationship between them and from that we were able to determine the unknown.</p>

<h2>The Confusion</h2>

<p>A confusion is often made of several unknown factors. The more unknowns the more
confusing the situation can be. Likewise, the more knowns there are the less confusion
there is. This then can aid us in gaining a foothold into the resolution problems.</p>

<p>One must operate from those elements which have the highest degree of certainty and
truth. From that solid foundation we attempt to solve one of the unkowns, then another and
another until all elements are solved.</p>

<p>For example, the police find a dead body? Who is it? How did he die? When? Was it murder?
Who killed him? There are many unknowns. They run his fingerprints and find out who he is.
They take the body to the coroner and get the time of death and probable cause of death.
Now they know it was Joe Burns, he died 48 hours ago and he was struck with a bat
which caused the death. They now have some nice solid knowns to operate from from.</p>

<p>Since they know he died 48 hours ago, they canvas the area looking for witnesses present
around that time. They can also use the time of death to eliminate suspects by
verifying alibis. They can look for a particular murder weapon.
With his ID, they can find his friends and family and ascertain possible
suspects.</p>

<p>Thus the police can begin to solve this mystery from building more and more knowns from
a declining number unknowns.</p>

<h2>Look Out for&hellip;</h2>

<p>One tries to operate from highest known one can achieve. This does not mean the
&lsquo;known&rsquo; is necessarily correct; it&rsquo;s just the most correct datum we have
available. For example in our crime drama, it&rsquo;s possible the
body may have been affected by some process which caused an incorrect conclusion as to
the time of death. Thus shifting the time line of events.</p>

<p>Occam&rsquo;s razor is very often misstated as the simplest answer is usually the correct
one. This is quite an incorrect statement. Actually, the principle states that the answer
with the least number of assumptions is the correct one. Complexity is not the issue,
assumptions are the problem.</p>

<p>So, beware of operating off of assumptions and here-say. The best thing is as direct an observation
as one can obtain. In solving issues at work, solutions have often been delayed by just taking
a coworkers word for it. This is not to say people are not truthful it&rsquo;s just that
we often have issues recalling things accurately or we might miscommunicate what we have
observed.</p>

<p>Play a game of telephone sometime with a group of friends and you&rsquo;ll be amazed how easily
facts are distorted within a few retellings.</p>

<p>Well, I hope this has been of value.</p>

<p>Take Care.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TGIF 4]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/23/tgif-4/"/>
    <updated>2015-04-23T20:09:12-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/23/tgif-4</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://www.verygoodindicators.com/images/tgif4_kitten.jpg" width="300"></p>

<p>Hello all. Thanks for coming by for TGIF 4. It&rsquo;s been another week and time
to end it with some vids. The theme this week is touchingly sweet videos that
will probably give you cavities. Hope you enjoy.</p>

<div style="text-align:center;">
<iframe width="560" height="315" src="https://www.youtube.com/embed/Bpu0TIXzI1w" frameborder="0" allowfullscreen></iframe>
</div>


<p>According to person who uploaded this video, &ldquo;The fireworks show had just ended,
but she thought she kept hearing them outside. So we sang to keep her mind preoccupied.
In the end, nothing competes with fireworks.&rdquo;</p>

<div style="text-align:center;">
<iframe width="560" height="315" src="https://www.youtube.com/embed/sJxxdQox7n0" frameborder="0" allowfullscreen></iframe>
</div>


<p>This is an incredible and short documentary covering an orchestra using instruments made
from trash found at the dump. A wonderful story about ingenuity.</p>

<div style="text-align:center;">
<iframe width="560" height="315" src="https://www.youtube.com/embed/jU4oA3kkAWU" frameborder="0" allowfullscreen></iframe>
</div>


<p>This is an inspiring story about an unlikely child soccer team which persevered despite many
obstacles.</p>

<div style="text-align:center;">
<iframe width="560" height="315" src="https://www.youtube.com/embed/xZjykPITuq0" frameborder="0" allowfullscreen></iframe>
</div>


<p>While this is only a car commercial, I found the overall message very powerful and words
to live by.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why ActiveRecord Sucks]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/20/why-activerecord-sucks/"/>
    <updated>2015-04-20T21:49:23-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/20/why-activerecord-sucks</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://www.verygoodindicators.com/images/aww-man-this-topics-sucks.jpg" width="300"></p>

<p>Ok, so I took an old play from the American media and used a sensationalized
title to get your attention. The fact is that I like ActiveRecord, I really do.
In fact I like it a little too much.</p>

<p>If you haven&rsquo;t done so you should read my last blog post titled <a href="http://www.verygoodindicators.com/blog/2015/04/19/easy-vs-simple/">&lsquo;Easy vs Simple&rsquo;</a>.
It&rsquo;s an article very much inspired by a <a href="http://www.infoq.com/presentations/Simple-Made-Easy">talk</a>
given by the creator of Clojure, Rich Hickey. The point my article and one of the many fine
points in Hickey&rsquo;s lecture attempts to make is that we as developers
have become obsessed with this idea of &lsquo;easy&rsquo;. So much are we enamored by it that
we&rsquo;re trading it in for a vast amount of complexity and inefficiency.</p>

<p>Giving you a little of my background, I&rsquo;ve had the pleasure working for two very
experienced and well known people in our profession. The first was Dave Thomas author
of the Pickaxe Book and Hal Helms who is very well known in the ColdFusion community.
I currently work for Hal and we have some fairly interesting discussions and arguements.
One revolves around ORMs. He is very  much of the opinion that we should not
use an ORM at all in Rails, at least he leans in that direction. While I am not such an
extremist, I have been tempering my enthusiasm for ActiveRecord with recent real world
experience dealing with performance issues.</p>

<h2>ActiveRecord is Fat</h2>

<p>How fat? When ActiveRecord sits around the house, it sits AROUND the house. I know bad
joke. Look, all the magic ActiveRecord does requires a significant amount
code which then leads to large amount of <a href="https://blog.engineyard.com/2009/thats-not-a-memory-leak-its-bloat/">memory</a>
used to spin up an instance. Spin up enough ActiveRecord instances that are not
garbage collected quick enough and the available memory on your box might be
all consumed.</p>

<p>ActiveRecord instances do a lot: persistence, validation, query generation, domain logic
and more. Yes it makes things easy and possibly makes code more readable but you&rsquo;re adding
complexity at least in the background. If you&rsquo;ve ever run into a new deep ActiveRecord bug,
good luck digging into that code for the first time.</p>

<h2>Your Classes Become Dependent on ActiveRecord</h2>

<p>Let compare two versions of code. One uses ActiveRecord, the other does not.</p>

<figure class='code'><figcaption><span>With ActiveRecord</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#app/service/foo.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:business</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#business is an ActiveRecord instance</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">business</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@business</span> <span class="o">=</span> <span class="n">business</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>    <span class="n">owners</span> <span class="o">=</span> <span class="n">business</span><span class="o">.</span><span class="n">owners</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">owners</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#app/service/biz.rb</span>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Business</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Without ActiveRecord</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#app/service/foo.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:owners</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#owners is an Array of Hashes</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">owners</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@owners</span> <span class="o">=</span> <span class="n">owners</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>    <span class="n">owners</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">owner</span><span class="o">|</span> <span class="n">owner</span><span class="o">[</span><span class="s2">&quot;name&quot;</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#app/service/biz.rb</span>
</span><span class='line'><span class="no">Bar</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Business</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">owners</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:attributes</span><span class="p">))</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Foo class is dependent on ActiveRecord. In order to run my rspec
tests on this code I&rsquo;ll have to load rails. Foo also expects the business
object to respond to #owners and each instance of owner to respond to #name.
This is quite a bit that we&rsquo;re asking Foo to know about the business object.
Foo is also sensitive to changes made to Business as well such that if we chose
to drop or rename the association to owners, the class would break.
A good article related to this is <a href="https://pragprog.com/articles/tell-dont-ask">&ldquo;Tell, Don&rsquo;t Ask&rdquo;</a>
which warns about this type of inadvertent coupling.</p>

<p>What we should be sending Foo is data not an object containing data that then needs
to be queried through it&rsquo;s api. Yes, I know a Hash is still
an object but I&rsquo;m speaking semantically. As you can see, Bar is given a Hash only.
There is no dependency on rails so my test can be run without loading rails and thus
can be run much faster. We no longer have the coupling we witnessed before.</p>

<h2>ActiveRecord is Lousy at Generating SQL</h2>

<p>It&rsquo;s not the fault of ActiveRecord, ORMs all have their limits.
For simple queries it works fine. Realize though that as your queries become
more complex and intricate the worse the SQL will be that AR generates. There&rsquo;s
just no way an ORM can craft a highly optimized complex query better than an
experienced engineer.</p>

<p>A backwards thing I catch myself doing sometimes is mentally figuring out how a non-trivial
query would be crafted in SQL and then I try to rewrite it into AR. I think at that point
I should do it in SQL.</p>

<h2>ActiveRecord, not so readable</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Report</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">execute</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">main_sql_string</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#=&gt; Main Query</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">main_sql_string</span>
</span><span class='line'>    <span class="o">&lt;&lt;-</span><span class="no">SQL</span>
</span><span class='line'><span class="sh">      SELECT businesses.name AS business_name, </span>
</span><span class='line'><span class="sh">        COALESCE(offer.name, format(&#39;Campaign ID - %s&#39;,offer.id::text)) AS campaign_name, </span>
</span><span class='line'><span class="sh">        COALESCE(user_replied.count,0) AS user_replied_count,</span>
</span><span class='line'><span class="sh">      FROM businesses</span>
</span><span class='line'><span class="sh">      INNER JOIN offer</span>
</span><span class='line'><span class="sh">        ON businesses.id = offer.business_id</span>
</span><span class='line'><span class="sh">      LEFT OUTER JOIN (#{user_replied_sql_string}) user_replied</span>
</span><span class='line'><span class="sh">        ON offer.id = user_replied.offer_id</span>
</span><span class='line'><span class="no">    SQL</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#=&gt; Subqueries</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">user_replied_sql_string</span>
</span><span class='line'>    <span class="o">&lt;&lt;-</span><span class="no">SQL</span>
</span><span class='line'><span class="sh">      SELECT cc_links.offer_id AS offer_id, COUNT(*) AS count </span>
</span><span class='line'><span class="sh">      FROM conversations</span>
</span><span class='line'><span class="sh">      INNER JOIN cc_links</span>
</span><span class='line'><span class="sh">        ON conversations.id = cc_links.conversation_id</span>
</span><span class='line'><span class="sh">      WHERE conversations.status = &#39;#{Conversation::Status::REPLIED_TO}&#39; </span>
</span><span class='line'><span class="sh">      GROUP BY cc_links.offer_id</span>
</span><span class='line'><span class="no">    SQL</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Take a look at code above. Can you imagine writing this in ActiveRecord. You&rsquo;d
have various calls to #joins, #group, #select, #from plus a fair share
of SQL fragments strewn about. For me the code above appears far more legible
that trying to express it in AR.</p>

<p>The last point I like to make is that I think there&rsquo;s an illness going around.
It might be caused by overzealous enthusiasm, inexperience or unwavering conviction.
But I&rsquo;ve seen it so many times; people become entranced with an ideal, rushing towards it
like a month to flame without the slightest thought to consequence or foresight. Again
I&rsquo;m a fan of ActiveRecord for the ease it brings but let&rsquo;s also consider the cost
as well.</p>

<p>Take Care.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy vs Simple]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/19/easy-vs-simple/"/>
    <updated>2015-04-19T16:47:24-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/19/easy-vs-simple</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://www.verygoodindicators.com/images/easy_street.jpg" width="300"></p>

<p>The meaning of words naturally evolve over time. As a consequence certain words
will unfortunately lose their distinctive meaning and become an undistinguished
synonym for another word. This is what I believe has happened with the words
&lsquo;easy&rsquo; and &lsquo;simple&rsquo; which are now used quite interchangeablely. The original
meaning of these words can help us illustrate a very important idea.</p>

<p>We&rsquo;ll start by looking at their definitions.</p>

<h2>Definitions</h2>

<blockquote><p>easy - requiring little effort; presenting few difficulties; not difficult.</p><p>simple - easily done, used, or understood.</p><footer><strong>Macmillian Dictionary for Students</strong></footer></blockquote>


<p>As you can see these words are very close in meaning today. Let&rsquo;s take a look
at what they used to mean.</p>

<h2>Origins</h2>

<p>&lsquo;Easy&rsquo; originally came from the Latin word ADJACERE which means to lie near. This
makes sense as those things which lie near physically or mentally are easy to
reach.</p>

<p>&lsquo;Simple&rsquo; comes for the Latin word SIMPLEX which means single fold. In other words
something is simple when it consists of very few parts. Thus when something
has little in the way of parts it then is not a difficult thing to grasp.</p>

<h2>Observations</h2>

<p>I&rsquo;d like to point out the origin of &lsquo;easy&rsquo; implies a certain subjectivity. As
things which are easy for me (near my mind) ,due to my experience, may not
be easy for someone else. In contrast &lsquo;simple&rsquo; is more objective. The more parts
and more intertwined and dependent those parts are of a thing, the less simple
that thing is.</p>

<p>For example Spanish is a simple language, Grammatically, it has fewer
irregularities than other romance languages. This would be an objective
statement.</p>

<p>However Spanish is easy for me since it&rsquo;s my first language and
difficult for my wife since she does not speak it. Thus we see easy
take on a more subjective role.</p>

<h2>Okay, so what?</h2>

<p>We are obsessed with the easy at the cost of complexity.The benefits or
detriments can be argued but it is none the less there. It is easy (close, near)
to go to the market and purchase a carton of orange juice but have you ever
wondered how complex (many parts) it was to produce that carton and it&rsquo;s contents?</p>

<p>It&rsquo;s far easier to use power windows but the mechanism has many parts and with
many parts comes the probability that something will go wrong sooner than a simpler
mechanism,  requiring service. It can be easy to ship a package but not so simple to find
one lost in the labyrinth it traveled.</p>

<p>Cheating, stealing and lying are all easy. We gain what we desire immediately.
The consequence is complexity. Keeping track of the lies told, avoiding discovery,
and having people distrust and hate us does not a simple life make.</p>

<p>This trade off between easy and simple is especially of concern to those who
build things such as engineers. Some select at tool or technique because
of it&rsquo;s ease of use yet it may actually lead to a complex structure which is
difficult to maintain and service.</p>

<p>Keep this in mind when doing something because it&rsquo;s easy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TGIF 3]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/16/tgif-3/"/>
    <updated>2015-04-16T22:07:46-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/16/tgif-3</id>
    <content type="html"><![CDATA[<p>Welcome back to TGIF 3. The theme for this set of videos is, &ldquo;Videos that soundly
utterly boring but in the end I found deeply interesting.&rdquo;</p>

<div style="text-align:center;">
<iframe width="560" height="315" src="https://www.youtube.com/embed/lT55_u8URU0" frameborder="0" allowfullscreen></iframe>
</div>


<p>Kintsugi is the  Japanese art of fixing broken pottery with lacquer
dusted or mixed with powdered gold, silver, or platinum. Instead of hiding the
imperfections of the breaks, they are flaunted.</p>

<div style="text-align:center;">
<iframe width="560" height="315" src="https://www.youtube.com/embed/7JkpYgjbYRg" frameborder="0" allowfullscreen></iframe>
</div>


<p>This is a trailer for the documentary on the Helvetica font. Yes that&rsquo;s right. Someone made a documentary&hellip;
about a font. I found it a very interesting voyage into the world of typography.</p>

<div style="text-align:center;">
<iframe width="560" height="315" src="https://www.youtube.com/embed/Fypi6dAJB8E" frameborder="0" allowfullscreen></iframe>
</div>


<p>This video exposed me to the interesting world of ink. I had no idea so much art and science
went into the process.</p>

<div style="text-align:center;">
<iframe width="560" height="315" src="https://www.youtube.com/embed/ZbK92bRW2lQ" frameborder="0" allowfullscreen></iframe>
</div>


<p>This is an episode of Nova covering Mandelbrot and fractals. Sounds like a real snooze
fest but it turned out to be quite interesting.</p>

<p>Well that&rsquo;s it. Have a great weekend.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips for Faster Queries]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/14/tips-for-faster-queries/"/>
    <updated>2015-04-14T19:54:54-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/14/tips-for-faster-queries</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://www.verygoodindicators.com/images/fast_snail.jpg" width="300"></p>

<p>For the last few weeks I&rsquo;ve been busy at work optimizing many of our
slowest queries. On my last Rails related post I covered a work around for
PostgreSQL&rsquo;s inherit slowness with COUNT queries. On this post I&rsquo;m covering
some common tips for speeding up general queries.</p>

<p>We&rsquo;ll start by looking at some code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#app/serializers/business_serializer.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BusinessSerializer</span> <span class="o">&lt;</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:zip</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#app/controllers/businesses_controller#any_ten_records</span>
</span><span class='line'><span class="no">Business</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;revenue + ? = ?&quot;</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:amount</span><span class="o">]</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="ss">:created_at</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the code above I use <a href="https://github.com/rails-api/active_model_serializers">ActiveModel::Serializers</a>
to describe which model attributes will be serialized into JSON. If you are unfamiliar
with this gem consider reading up on it. It&rsquo;s pretty handy for DRYing up your code. The
database I am using is PostgreSQL.</p>

<h2>Don&rsquo;t SELECT *</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#Business.where(&quot;revenue + ? = ?&quot;, params[:amount], 100).order(:created_at).to_a.first(10)</span>
</span><span class='line'><span class="no">Business</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:zip</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;revenue + ? = ?&quot;</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:amount</span><span class="o">]</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="ss">:created_at</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">to_a</span>
</span><span class='line'>  <span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The serailizer tells me that the only thing I need to return is <code>business#name</code>
and <code>business#zip</code>. The more record columns you request data on, the slower your
query might run as it will use more Network I/O and sometimes Disk I/O.
You could boost performance by selecting only the columns you require.</p>

<h2>Filter Rows With Limit</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#Business.select(:name, :zip)</span>
</span><span class='line'><span class="c1">#  .where(&quot;revenue + ? = ?&quot;, params[:amount], 100)</span>
</span><span class='line'><span class="c1">#  .order(:created_at)</span>
</span><span class='line'><span class="c1">#  .to_a</span>
</span><span class='line'><span class="c1">#  .first(10)</span>
</span><span class='line'><span class="no">Business</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:zip</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;revenue + ? = ?&quot;</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:amount</span><span class="o">]</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="ss">:created_at</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see from <code>#first(10)</code> that we are only interested in returning the first
ten records we fetched from the query. We could potentially and unnecessarily
request a huge record set and consume a ton of memory by instantiating those
records as ActiveRecord objects.</p>

<h2>Avoid Sorting</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#Business.select(:name, :zip)</span>
</span><span class='line'><span class="c1">#  .where(&quot;revenue + ? = ?&quot;, params[:amount], 100)</span>
</span><span class='line'><span class="c1">#  .limit(10)</span>
</span><span class='line'><span class="c1">#  .order(:created_at)</span>
</span><span class='line'><span class="no">Business</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:zip</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;revenue + ? = ?&quot;</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:amount</span><span class="o">]</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sorting is sometimes unavoidable but we should try not to utilize it when
possible. The <code>ORDER BY</code> generated will consume sorting memory on the server.
In cases where memory becomes scarce on the server, it will spill over to
disk making it painfully slow.</p>

<h2>Don&rsquo;t Accidentally Skip Using an Index</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#Business.select(:name, :zip)</span>
</span><span class='line'><span class="c1">#  .where(&quot;revenue + ? = ?&quot;, params[:amount], 100)</span>
</span><span class='line'><span class="c1">#  .limit(10)</span>
</span><span class='line'><span class="no">Business</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:zip</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;revenue = ? - ?&quot;</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:amount</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the businesses table is using an index on the field revenue, the original code
would skip using the index. To take advantage of the index we need to shift the
calculation from the left hand side of the equation to the right hand side.</p>

<p>Thank you for coming by. Feel free to share and comment below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Measure Learn]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/12/build-measure-learn/"/>
    <updated>2015-04-12T14:34:48-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/12/build-measure-learn</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://www.verygoodindicators.com/images/build-measure-learn.jpg" width="300"></p>

<p>Some months ago I came across a list of top books recommended by
successful entrepreneurs. Towards the top of this list was the
book &lsquo;The Lean Startup&rsquo;. I highly recommend this book to anyone
looking to start their own business or anyone involved in management.</p>

<p>One of the major concepts in the lean startup method is what&rsquo;s referred to
as the Build-Measure-Learn feedback loop. The basic idea is a cycle of
of building a product, measuring success then learning from this measurement
and other actions so as to build a better product and finally start
the cycle again. It is a way managing uncertainty and risk.</p>

<p>Realize that it&rsquo;s the speed at which this cycle occurs that most likely
determines success. A startup or new venture has a limited amount of time
and/or funds in order to become a viable concern. Once these resources are
consumed and no other options are present; the startup is done. This is why
speed is of essence.</p>

<p>While the cycle seems straight forward, each of these points on the cycle
has it&rsquo;s challenges.</p>

<h2>Build</h2>

<p>The Lean Startup has the concept of a Minimal Viable Product or MVP.
The idea is that you never build more than what is needed to learn.
While we would all love to produce a beautiful finished and polished
piece of work, it comes at a price. The price is time and waste.</p>

<p>What benefit is it to create a &lsquo;wonderful&rsquo; product that no one will ever buy?
The end result is a tremendous investment in time with the end result of
learning that no one wants it. One could have learned this in a fraction
of the time and expense with an MVP.</p>

<h2>Measure</h2>

<p>Learn to measure and track meaningful things that will guide you in determining
if your product is proving successful. The book covers in detail the difference
between actionable metrics and vanity metrics. In order for a metric to be
actionable it must demonstrate clear cause and effect. Otherwise the metric
could lead you astray giving you a false sense of security.</p>

<h2>Learn</h2>

<p>Are you taking what you&rsquo;ve learned from your metrics to build an even better
product or are you randomly dropping in product features and strategies simply
because it &lsquo;feels right&rsquo; or it sounds like a &lsquo;good idea&rsquo;? At what point do
you make a fundamental change to your business based on the learning done
so far? What have we learned and what are we doing about it?</p>

<p>I hope you enjoyed this little article.</p>

<p>The last couple of weeks I&rsquo;ve been sticking to a pattern that has worked well
for me for releasing new blog content. On Mondays I&rsquo;ll post an article on self
improvement or health related topic. Wednesday I&rsquo;ll release an article for
folks doing software development and Fridays I&rsquo;ll close out the week with
something fun such as some interesting Youtube videos. Thanks to all my
return visitors. I hope you come back soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TGIF 2]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/10/tgif-2/"/>
    <updated>2015-04-10T15:06:29-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/10/tgif-2</id>
    <content type="html"><![CDATA[<p>Hello All and Thank God It&rsquo;s Friday. It&rsquo;s been a very busy week
and I ready to relax with some fun vids. In view that the release
of Avengers 2 is right around the corner, I think we&rsquo;ll theme this post
with one my favorite Avengers, Thor.</p>

<div style="text-align:center;">
<iframe width="560" height="315" src="https://www.youtube.com/embed/-H3CwENDXn8" frameborder="0" allowfullscreen></iframe>
</div>


<p>Let&rsquo;s start with a comic book history lesson. It would surprise you to know
that Thor used to have a secret identity.</p>

<div style="text-align:center;">
<iframe width="560" height="315" src="https://www.youtube.com/embed/i_xFOmYxKYw" frameborder="0" allowfullscreen></iframe>
</div>


<p>What&rsquo;s more epic than an epic rap battle? Nothing of course.</p>

<div style="text-align:center;">
<iframe width="560" height="315" src="https://www.youtube.com/embed/6M5pYyW6lLw" frameborder="0" allowfullscreen></iframe>
</div>


<p>If you&rsquo;re like me then sometimes you lay awake at night wondering who would win
in fight; Thor or Superman?</p>

<div style="text-align:center;">
<iframe width="420" height="315" src="https://www.youtube.com/embed/DOOdNZbbpg4" frameborder="0" allowfullscreen></iframe>
</div>


<p>If you&rsquo;re fan of the old Hulk television series, you might be happy to know that
there was a television movie a few years after the series was cancelled with
an appearance of Thor.</p>

<p>Well, that&rsquo;s it for now. Have a good one.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faster Count Queries]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/07/faster-count-queries/"/>
    <updated>2015-04-07T16:11:47-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/07/faster-count-queries</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://www.verygoodindicators.com/images/cheetah_still.jpg" width="150"></p>

<p>Some of you have noticed that PostgreSQL&rsquo;s count performs painfully slow on tables
of any significant size. If you&rsquo;re looking for a quick solution and you don&rsquo;t
care about super exact numbers on the count then I&rsquo;ll show you what I did.</p>

<p>The reason counts are so slow in postgres has to do with the way Multi-Version
Concurrency Control(MVCC) has been implemented in the
<a href="http://wiki.postgresql.org/wiki/Slow_Counting">product</a>. Since multiple transactions
can see different states of the data then there can be no straightforward way for &ldquo;COUNT(*)&rdquo;
to summarize data across the whole table. As a result postgres must walk through all rows
in a sense.</p>

<p>I found an interesting article on how to accomplish a much faster, although less accurate
count by tapping into the EXPLAIN output through a custom <a href="https://wiki.postgresql.org/wiki/Count_estimate">function</a>.
I&rsquo;ll walk you through the steps I took.</p>

<figure class='code'><figcaption><span>count_estimate function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">FUNCTION</span> <span class="n">count_estimate</span><span class="p">(</span><span class="n">query</span> <span class="nb">text</span><span class="p">)</span> <span class="k">RETURNS</span> <span class="nb">integer</span> <span class="k">AS</span>
</span><span class='line'><span class="err">$</span><span class="n">func</span><span class="err">$</span>
</span><span class='line'><span class="k">DECLARE</span>
</span><span class='line'>    <span class="n">rec</span>   <span class="n">record</span><span class="p">;</span>
</span><span class='line'>    <span class="k">rows</span>  <span class="nb">integer</span><span class="p">;</span>
</span><span class='line'><span class="k">BEGIN</span>
</span><span class='line'>    <span class="k">FOR</span> <span class="n">rec</span> <span class="k">IN</span> <span class="k">EXECUTE</span> <span class="s1">&#39;EXPLAIN &#39;</span> <span class="o">||</span> <span class="n">query</span> <span class="n">LOOP</span>
</span><span class='line'>        <span class="k">rows</span> <span class="p">:</span><span class="o">=</span> <span class="k">substring</span><span class="p">(</span><span class="n">rec</span><span class="p">.</span><span class="ss">&quot;QUERY PLAN&quot;</span> <span class="k">FROM</span> <span class="s1">&#39; rows=([[:digit:]]+)&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">EXIT</span> <span class="k">WHEN</span> <span class="k">rows</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">END</span> <span class="n">LOOP</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">RETURN</span> <span class="k">rows</span><span class="p">;</span>
</span><span class='line'><span class="k">END</span>
</span><span class='line'><span class="err">$</span><span class="n">func</span><span class="err">$</span> <span class="k">LANGUAGE</span> <span class="n">plpgsql</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above is the create query for out SQL function that we&rsquo;ll need to create on the server.
First we&rsquo;ll create a migration to hold our function creation statement.</p>

<figure class='code'><figcaption><span>migration</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#run this at the console first</span>
</span><span class='line'><span class="c1">#  bundle exec rails g migration AddCountEstimateFunction</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AddCountEstimateFunction</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">up</span>
</span><span class='line'>    <span class="n">execute</span> <span class="o">&lt;&lt;-</span><span class="no">SQL</span>
</span><span class='line'><span class="sh">      CREATE FUNCTION count_estimate(query text) RETURNS integer AS</span>
</span><span class='line'><span class="sh">      $func$</span>
</span><span class='line'><span class="sh">      DECLARE</span>
</span><span class='line'><span class="sh">          rec   record;</span>
</span><span class='line'><span class="sh">          rows  integer;</span>
</span><span class='line'><span class="sh">      BEGIN</span>
</span><span class='line'><span class="sh">          FOR rec IN EXECUTE &#39;EXPLAIN &#39; || query LOOP</span>
</span><span class='line'><span class="sh">              rows := substring(rec.&quot;QUERY PLAN&quot; FROM &#39; rows=([[:digit:]]+)&#39;);</span>
</span><span class='line'><span class="sh">              EXIT WHEN rows IS NOT NULL;</span>
</span><span class='line'><span class="sh">          END LOOP;</span>
</span><span class='line'><span class="sh">       </span>
</span><span class='line'><span class="sh">          RETURN rows;</span>
</span><span class='line'><span class="sh">      END</span>
</span><span class='line'><span class="sh">      $func$ LANGUAGE plpgsql;</span>
</span><span class='line'><span class="no">    SQL</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">down</span>
</span><span class='line'>    <span class="n">execute</span> <span class="s2">&quot;DROP FUNCTION count_estimate(query text);&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>After we run <code>bundle exec rake db:migrate</code> the function will be available for use.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;SELECT count_estimate(&#39;</span><span class="si">#{</span><span class="n">sql_query</span><span class="si">}</span><span class="s2">&#39;)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#Example:</span>
</span><span class='line'><span class="c1">#  sql_query = &quot;SELECT * FROM businesses WHERE size &gt; 3&quot;</span>
</span><span class='line'><span class="c1">#  ActiveRecord::Base.connection.execute(&quot;SELECT count_estimate(&#39;#{sql_query}&#39;)&quot;).to_a</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#returns</span>
</span><span class='line'><span class="c1">#  [{&quot;count_estimate&quot; =&gt; &quot;500&quot;}]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The snippet above shows how you would now use this SQL function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Business</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">comment_count</span>
</span><span class='line'>    <span class="c1">#This will return an estimate but not exactly the real number</span>
</span><span class='line'>    <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;SELECT count_estimate(&#39;</span><span class="si">#{</span><span class="n">comments_sql_string</span><span class="si">}</span><span class="s2">&#39;)&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="s2">&quot;count_estimate&quot;</span><span class="o">].</span><span class="n">to_i</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">comments_sql_string</span>
</span><span class='line'>    <span class="o">&lt;&lt;-</span><span class="no">SQL</span>
</span><span class='line'><span class="sh">      SELECT * FROM comments </span>
</span><span class='line'><span class="sh">      WHERE comments.business_id = #{self.id} </span>
</span><span class='line'><span class="sh">        AND comments.status = &#39;&#39;new&#39;&#39;</span>
</span><span class='line'><span class="no">    SQL</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#Business.last.comment_count</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#=&gt; 9</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, here is a more fleshed out implementation. Just a note, but make sure you character escape
those single quotes by using two single quotes <code>''</code> otherwise you&rsquo;ll get a SQL error on the syntax.</p>

<p>If this was useful then please share on your social media connections. I also like hearing
any suggestions and comments so feel free to drop some below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Pareto Principle]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/05/the-pareto-principle/"/>
    <updated>2015-04-05T17:51:33-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/05/the-pareto-principle</id>
    <content type="html"><![CDATA[<p>There is a very powerful principle and it can be quite
transformative if you can learn to spot it and apply it to your daily life.
I first became aware of the Pareto Principle when I worked as a
developer at a company in the business of selling software to mid-level
manufacturing companies.</p>

<p><img class="right" src="http://www.verygoodindicators.com/images/pareto-principle.jpg" width="300"></p>

<p>The Pareto Principle goes by many names such the 80/20 principle, Pareto&rsquo;s
Law, the law of the vital few and more. What it basically states is that
20% of the causes drive 80% of the effects. Another way of saying this is
that 20% of the inputs results in 80% of the outputs. For example a company
will likely find that 20% of their customers generate 80% of their income.</p>

<p>Microsoft found that fixing the top 20% of the most reported bugs eliminated
80% of the related errors and crashes in a given <a href="http://en.wikipedia.org/wiki/Pareto_principle">system</a>.
Other observations have included things such as:</p>

<ul>
<li>20% of motorists cause 80% of traffic accidents</li>
<li>20% of criminals account for 80% of the value of all crime</li>
<li>20% of the clothes a person person owns is worn 80% of the time.</li>
</ul>


<p>I was recently reintroduced to the principle upon reading Tim Ferriss&#8217; book,
The 4-hour Workweek. He drives home the idea of eliminating waste through its
use and this is one way the principle can be transformative.</p>

<p>If a company realizes that 80% of it&rsquo;s time is consumed by 20% of its customers
then it must ask itself the hard question, &ldquo;Should we part ways with those clients.&rdquo;
If those clients are contribiting only a small amount of the revenue but
are capitalizing most of the time then indeed parting ways maybe the smart choice.</p>

<p>We may find in our own daily lives that 20% of our activities consume
80% of our time. These activities could consist of web surfing, answering
emails, and other unproductive activities. Should we remove or greatly
limit these activities then we could recoop signifact chunks of time
as well as reduce our stress.</p>

<p>Give it some thought and see if this principle can be applied to an area
of your life, activity or business.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TGIF]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/02/tgif/"/>
    <updated>2015-04-02T22:27:12-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/02/tgif</id>
    <content type="html"><![CDATA[<p>One of the things I&rsquo;m finding pretty fun these last few fridays is
watching some good youtube vids. I have a pretty eclectic taste so I think
you might find some of these interesting to you.
What I&rsquo;d like to shoot for is sharing some of the more interesting
videos every Friday.</p>

<div style="text-align:center;">
<iframe width="560" height="315" src="https://www.youtube.com/embed/YxgsxaFWWHQ" frameborder="0" allowfullscreen></iframe>
</div>


<p>If you&rsquo;re like me and love the Lord of the Rings films but don&rsquo;t have the patience to slug
through hundreds of pages of fiction then this video is for you. It gives you a nice
background on the mythos of the LOTR universe.</p>

<div style="text-align:center;">
<iframe width="560" height="315" src="https://www.youtube.com/embed/WKU0qDpu3AM" frameborder="0" allowfullscreen></iframe>
</div>


<p>Speaking of LOTR, have you watched the trilogy only to ask yourself, &ldquo;&hellip;So what does the One Ring
do again?&rdquo;. Well then this video is just for you.</p>

<div style="text-align:center;">
<iframe width="560" height="315" src="https://www.youtube.com/embed/HeYfIv5s10A" frameborder="0" allowfullscreen></iframe>
</div>


<p>Want a theory for the existence of the Hulk? Kyle Hill takes a stab at the question
with some science. Oh yeah!</p>

<div style="text-align:center;">
<iframe width="560" height="315" src="https://www.youtube.com/embed/tUEkqZxLyrg" frameborder="0" allowfullscreen></iframe>
</div>


<p>If you&rsquo;re a big ol&#8217; comic book geek like me then you&rsquo;re loving all the little bits of news
trickling in about the upcoming Deadpool movie.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binding Object Intro]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/04/01/binding-object-intro/"/>
    <updated>2015-04-01T18:04:49-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/04/01/binding-object-intro</id>
    <content type="html"><![CDATA[<p>The following is a quick intro to Ruby&rsquo;s Binding object. The Binding object
holds the execution context of that particular scope. You can evaluate
variables against a particular binding to fetch or set the values of those
variables. Let&rsquo;s look at some code and then walkthrough what is happening.</p>

<p>What we&rsquo;re going to do in the following piece of code is capture the local
variables within the scope of Foo#run and send them to our error reporting
service which simply puts out the results to the console. In this example I am
using Ruby version 2.2.1.</p>

<figure class='code'><figcaption><span>Binding object example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>    <span class="n">fruit</span> <span class="o">=</span> <span class="s2">&quot;apple&quot;</span>
</span><span class='line'>    <span class="n">vegi</span>  <span class="o">=</span> <span class="s2">&quot;corn&quot;</span>
</span><span class='line'>    <span class="n">nut</span>   <span class="o">=</span> <span class="s2">&quot;peanut&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="k">raise</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>      <span class="n">report_error</span><span class="p">(</span><span class="n">capture_variables</span><span class="p">(</span><span class="nb">binding</span><span class="p">,</span> <span class="o">[</span><span class="ss">:e</span><span class="o">]</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">protected</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#error reporting service</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">report_error</span><span class="p">(</span><span class="n">var_hash</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">var_hash</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">capture_variables</span><span class="p">(</span><span class="n">previous_binding</span><span class="p">,</span> <span class="n">skip_vars</span> <span class="o">=</span> <span class="o">[]</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">#                    -- returns [:fruit, :vegi, :nut, :e]</span>
</span><span class='line'>    <span class="c1">#                   / </span>
</span><span class='line'>    <span class="n">previous_binding</span><span class="o">.</span><span class="n">local_variables</span><span class="o">.</span><span class="n">inject</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="nb">hash</span><span class="p">,</span><span class="n">var</span><span class="o">|</span>
</span><span class='line'>      <span class="k">begin</span>
</span><span class='line'>        <span class="c1"># Binding#local_variable_get will fetch the value of the local variable</span>
</span><span class='line'>        <span class="c1">#   for example Binding#local_variable_get(:fruit) returns &quot;apple&quot;</span>
</span><span class='line'>        <span class="nb">hash</span><span class="o">.</span><span class="n">merge!</span><span class="p">(</span><span class="n">var</span> <span class="o">=&gt;</span> <span class="n">previous_binding</span><span class="o">.</span><span class="n">local_variable_get</span><span class="p">(</span><span class="n">var</span><span class="p">))</span> <span class="k">unless</span> <span class="n">skip_vars</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">var</span><span class="p">)</span>
</span><span class='line'>      <span class="k">rescue</span> <span class="no">NameError</span>
</span><span class='line'>        <span class="c1">#We rescue NameError due to a weird artifact that raise creates.</span>
</span><span class='line'>        <span class="c1">#The artifact appears to be a local variable but &#39;raises&#39; an error</span>
</span><span class='line'>        <span class="c1">#  when any attempt to evaluate it occurs.</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">hash</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you notice on lines 3-4, we&rsquo;ve set a few local variables. On line 8, we
intentionally raise an error. Line 10 sends our reporting service a hash
containing all variables in that scope with their values. The hash is
generated by the method #capture_variables.</p>

<p>Here&rsquo;s how the method works. We send it the current binding by simply sending it
&lsquo;binding&rsquo; as seen on line 10. We also send it an array of symbols representing any local
variables we&rsquo;re not interested in reporting which in our case is &lsquo;e&rsquo;.</p>

<p>On line 22 we call Binding#local_variables which returns an array of symbols
representing the local variables we defined. We iterate over the collection
of symbols with #inject so as to build a hash with the keys being the
variable names and the values the variable values.</p>

<p>On line 27 we call Binding#local_variable_get to fetch the value of the local
variable as defined in previous execution context. Now we execute Foo.new.run to
see what we get.</p>

<figure class='code'><figcaption><span>Console Output </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">run</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="p">{</span><span class="ss">:fruit</span><span class="o">=&gt;</span><span class="s2">&quot;apple&quot;</span><span class="p">,</span> <span class="ss">:vegi</span><span class="o">=&gt;</span><span class="s2">&quot;corn&quot;</span><span class="p">,</span> <span class="ss">:nut</span><span class="o">=&gt;</span><span class="s2">&quot;peanut&quot;</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see above our reporting service is receiving the hash as expected.</p>

<p>Feel free to drop some comments or questions below. And if you liked it then
please share on twitter, facebook or your prefered social media channel.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Blow Against Grammar Nazis]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/03/22/a-blow-against-grammar-nazis/"/>
    <updated>2015-03-22T15:06:11-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/03/22/a-blow-against-grammar-nazis</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://www.verygoodindicators.com/images/raine.jpg" width="473" title="" ></p>

<blockquote><p>You probably heard we ain&#8217;t in the prisoner-takin&#8217; business; <br/>we in the killin&#8217; Nazi business. And cousin, business is a-boomin&#8217;.</p><footer><strong>Lt. Aldo Raine</strong> <cite>Inglourious Basterds</cite></footer></blockquote>


<p>I recognize that grammar is important. Use of proper grammar not only
sounds pleasant, it also ensures a higher degree of
clarity on the subject one is addressing. So while I am not saying grammar doesn&rsquo;t
matter, I would like to address several myths and misconceptions regarding grammar
as well as some thoughts regarding the correction of another&rsquo;s grammar in everyday
speech.</p>

<p>Alright, see if this sounds familiar. You&rsquo;re having a discussion with someone and the
grammar Nazi all of a sudden objects to something you&rsquo;ve said.
As if you&rsquo;ve offended his mother he says, &ldquo;No, that&rsquo;s not
correct. There is no such word as that,&rdquo; or he&rsquo;ll say, &ldquo;You&rsquo;re using that incorrectly,&rdquo;
or some such claim.</p>

<p>I&rsquo;m going to give you a couple of good ways to defend yourself so you don&rsquo;t
feel completely victimized. After all this is &lsquo;merica!
And there&rsquo;s nothing Americans like more than kill&#8217;n some Nazis.</p>

<h2>That Word Does Not Exist</h2>

<p>First off, what the Nazi really means is that the word doesn&rsquo;t exist in the
dictionary. Now that assumes that presence in a dictionary is the absolute
authority on whether a word exists or not, which it isn&rsquo;t.</p>

<p>Most English dictionaries include only those words that meet certain criteria
of <a href="http://www.merriam-webster.com/help/faq/words_in.htm">usage</a>. Because of this
words that are still in the process of becoming established are often omitted.
Some words are so informal or specialized that they are rarely documented in
professionally edited works. However these words are as real as those that have
gained entry with the only difference that they haven&rsquo;t met the strict criteria for
being <a href="http://www.merriam-webster.com/help/faq/real_words.htm">entered</a>.</p>

<h2>Nonstandard Words</h2>

<p>A nonstandard word is defined as:</p>

<blockquote><p>Not conforming to the speech or grammar of educated people and often <br/>regarded as a marker of low social status.</p><footer><strong>Random House Webster&#8217;s College Dictionary</strong></footer></blockquote>


<p>You&rsquo;ll notice the connotation of social status in connection to nonstandard words.
I&rsquo;ll comment on that a bit later.</p>

<p>Here are some examples of nonstandard words:</p>

<ul>
<li>ain&rsquo;t - You ain&rsquo;t the law.</li>
<li>nohow - We could nohow make out his handwriting.</li>
<li>irregardless - I&rsquo;ll buy it irregardless of cost.</li>
</ul>


<p>However allowances are given to the use of nonstandard words in certain situations.
In fiction, use of nonstandard words is allowed in the dialogue of characters so as
to reflect the character&rsquo;s background and level of education.
Educated speakers will often use nonstandard forms to set a popular or informal
<a href="http://www.thefreedictionary.com/nonstandard">tone</a>.</p>

<p>Nonstandard forms can be perfectly acceptable in certain regions. An example is the
unrecognized contraction of <a href="http://en.wikipedia.org/wiki/Y%27all">&ldquo;y&#8217;all&rdquo;</a>. It is the
nonstandard form of the contraction &lsquo;you&rsquo; and &lsquo;all&rsquo;, yet commonly
used throughout the southern United States.</p>

<p>It is the view of some linguists that what is considered standard english is a
matter of societal opinion.</p>

<blockquote><p>It is important to understand that identifying a dialect as standard or <br/>nonstandard is a sociological judgment, not a linguistic one.</p><footer><strong>F. Parker and K. Riley</strong> <cite>Linguistics for Non-Linguists</cite></footer></blockquote>


<p>Take for example the rule against the use of double negatives. It says that two
negatives cancel each other out. &ldquo;I can&rsquo;t get no satisfaction.&rdquo;, basically means that
I can get satisfaction. However this rule didn&rsquo;t see application until after the 17th
century when certain writers sought to relate the rules of the language to logic and
<a href="http://blog.oxforddictionaries.com/2012/02/grammar-myths-3/">mathematics</a>.
Prior to that it was common to use double negatives as emphasizing a negative.</p>

<blockquote><p>Ther nas no man nowher so vertuousâ€¦</p><footer><strong>Chaucer</strong> <cite>The Friarâ€™s Tale</cite></footer></blockquote>




<blockquote><p>I never was nor never will be.</p><footer><strong>Shakespeare</strong> <cite>Richard III</cite></footer></blockquote>


<p>You&rsquo;ll notice the use of double negatives in some of these great literary works of
the English language.</p>

<p>My point is that nonstandard words do have a place in everyday speech and it doesn&rsquo;t
automatically make them completely unacceptable.</p>

<h2>Rules for the Sake of Rules</h2>

<p>As I said earlier the reason for grammar is that it provides the rules of language
structure so that individuals can understand one another. The more a person diverges
from proper grammar the greater his risk of either being misunderstood or not understood
at all.</p>

<p>However, the Nazi will commonly object to perfectly understandable speech merely
on the fact that it is not, in the strictest sense, perfect grammar. I believe
this to be an unreasonable expectation of informal speech.</p>

<p>I liken this to driving with the passenger objecting every time you drive a mile or two
over the speed limit, questioning your ability to drive and commenting on how you
are hazard to other drivers on the road. All because you are not strictly following
the rules of the road.</p>

<h2>Train of Thought</h2>

<p>Questioning someone&rsquo;s grammar usage is disruptive to the current
conversation. Realize that whatever you were discussing has now taken a backseat
to a grammar lesson. Continue this action long enough and you&rsquo;re liable to not
get much done or waste others&#8217; time.</p>

<p>I would especially question this practice in a work setting such as a meeting.
Is the subject you&rsquo;re meeting about so unimportant that it&rsquo;s acceptable to sidetrack
it with a discussion on grammar? However, if you&rsquo;re the boss then feel free to
teach as you&rsquo;re paying your employees to attend this lesson.</p>

<h2>Etiquette</h2>

<blockquote><p>Unless he is teaching an English class,<br/>a gentleman does not corrects another person&#8217;s grammar.</p><footer><strong>John Bridges & Bryan Curtis</strong> <cite>As a Gentleman Would Say: Responses to Life&#8217;s Important (and Sometimes Awkward) Situations</cite></footer></blockquote>


<p>Manners is the grease which eases the friction of human relations. Many times those who
use poor grammar are individuals to whom English is a second language. Other times they
may have only a rudimentary education. Drawing attention to their use
of poor grammar is tantamount to calling them stupid or of lower class than you.
This is compounded when such corrections are done in the presence of others.</p>

<p>If someone calls your grammar into question then feel free to call their etiquette
into question. Be an Etiquette Nazi and see how they like it.</p>

<p>Don&rsquo;t behave like the guy at the gym who walks up to someone criticizing their form or
workout without being solicited to do so.</p>

<h2>Summary</h2>

<p>There&rsquo;s no such thing as a word that does not exist, only words that are not
commonly used. There are cases where nonstandard forms are perfectly acceptable. Grammar
helps us understand each other, it is not just a bunch of rules for the sake of rules.
Interrupting someone&rsquo;s train of thought is disruptive and can be considered rude.</p>

<p>In closing I leave you with this funny skit by the guys at College Humor. Notice the Nazi
falls victim to his own unrelenting criticisms because even the most pedantic grammar critic
will at some point make his own grammatical transgression.</p>

<p>Feel free to drop some comments or questions below. And if you liked it then
please share on twitter, facebook or your prefered social media channel.</p>

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('N4vf8N6GpdM');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/N4vf8N6GpdM?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/N4vf8N6GpdM/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=N4vf8N6GpdM" id="N4vf8N6GpdM" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">Grammar Nazis</div>
</a>
<div class="video-info" >CLICK FOR THAT CHEESY MEATY GOODNESS http://bit.ly/ykCeQ2
See more http://www.collegehumor.com   
 
LIKE us on: http://www.facebook.com/collegehumor
FOLLOW us on: http://www.twitter.com/collegehumor
FOLLOW us on: http://www.tumblr.com/collegehumor</div>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Immortalize a Former Coworker]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/03/21/how-immortalize-a-former-coworker/"/>
    <updated>2015-03-21T15:12:56-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/03/21/how-immortalize-a-former-coworker</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://www.verygoodindicators.com/images/shawshank_red.jpg" width="473" height="358"></p>

<blockquote><p>Sometimes it makes me sad, though, Andy being gone. I have to remind <br/>myself that some birds aren&#8217;t meant to be caged, that&#8217;s all. Their <br/>feathers are just too bright and when they fly away, the part <br/>of you that knows it was a sin to lock them up does rejoice&#8230;but still, <br/>the place you live is that much more drab and empty that they&#8217;re gone.</p><footer><strong>Red</strong> <cite>The Shawshank Redemption</cite></footer></blockquote>


<p>There are times when you miss a fomer coworker. Maybe they were really good at what
they did. Perhaps they were clever, upbeat or eccentric. Or maybe they offered much
needed comic relief.</p>

<p>A couple of months ago one of my coworkers decided to take a couple years off from work to
strike it on his own to build a product he&rsquo;s passionate about without the
daily pressures of a job.</p>

<p>He&rsquo;s a young guy with his own offbeat sense of humor. Those of us that worked with him
found him quite hilarious.</p>

<p>I don&rsquo;t know what inspired me to do this but I drew a caricature of him on dry erase
painted wall of our office and I every so often I update the captions on it. People read
it have a good laugh and it&rsquo;s almost like he never left.</p>

<p><img class="center" src="http://www.verygoodindicators.com/images/hpisms_1.jpg" width="900"></p>

<p>Now, this coworker is a young guy just a few years out of college. He is an atheist who
seems to disappear into his room for days according to his roommate. He loves to play
video games downing a six pack of Monster Energy drinks and a family size bag of Skittles&hellip;
ok, I made up that last bit.</p>

<p><img class="center" src="http://www.verygoodindicators.com/images/hpisms_2.jpg" width="900"></p>

<p>I theorize that he must be keeping a joural of all the wrongs inflicted on him by the
world yet I have absolutely no proof whatsoever. He apparently is not compelled to give
Christmas presents to his family yet for some strange reason has no problem accepting
them.</p>

<p>Feel free to drop some comments or questions below. And if you liked it then
please share on twitter, facebook or your prefered social media channel.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Class Class]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/03/20/class-class/"/>
    <updated>2015-03-20T20:53:35-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/03/20/class-class</id>
    <content type="html"><![CDATA[<p>This will post will be short and sweet; we&rsquo;ll cover the Ruby class Class. For
those unfamiliar with the class called Class, it is basically a Ruby object for creating
Ruby classes. This comes in very handy when doing metaprogramming or writing code that
generates code.</p>

<figure class='code'><figcaption><span>Typical Way of Creating a class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hey</span>
</span><span class='line'>    <span class="s2">&quot;hey&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above you&rsquo;ll see the regular old way of creating a class in Ruby.</p>

<figure class='code'><figcaption><span>Class Way of Creating a class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Foo</span> <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hey</span>
</span><span class='line'>    <span class="s2">&quot;hey&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can do the exact same thing using Class as the example above shows. Subclassing
can also be done very easily.</p>

<figure class='code'><figcaption><span>Typical Way of Subclassing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Bar</span> <span class="o">&lt;</span> <span class="no">Foo</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above is how one would typically do subclassing. Class Bar inherits from class Foo.</p>

<figure class='code'><figcaption><span>Class Way of Subclassing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Bar</span> <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Foo</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is how it&rsquo;s accomplished with class Class.</p>

<p>A usual situation where I use Class is when I need to create custom errors. I think
we can all be code snobs from time to time (I hope it&rsquo;s not just me) so I maybe overly
critical when I say the following. When people attempt to cram multiple lines of ruby
code on one line using &lsquo;;&rsquo;, a little piece of my dies.</p>

<figure class='code'><figcaption><span>&#8230;kill me now</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">NameNotDefined</span> <span class="o">&lt;</span> <span class="no">RuntimeError</span><span class="p">;</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Is it just me or is the above just painful to look at?</p>

<figure class='code'><figcaption><span>A blissful expression</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">NameNotDefined</span> <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">RuntimeError</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now isn&rsquo;t this so much better? I can now relax.</p>

<p>I hope it&rsquo;s been educational. Feel free to drop some comments or questions below. And if you liked it then
please share on twitter, facebook or your prefered social media channel.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Constructors]]></title>
    <link href="http://www.verygoodindicators.com/blog/2015/03/15/ruby-contructors/"/>
    <updated>2015-03-15T13:24:08-05:00</updated>
    <id>http://www.verygoodindicators.com/blog/2015/03/15/ruby-contructors</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>Visual Basic .NET</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vb.net'><span class='line'><span class="c">&#39;Visual Basic .NET</span>
</span><span class='line'><span class="k">Dim</span> <span class="n">sf</span> <span class="ow">As</span> <span class="n">BaseballTeam</span> <span class="o">=</span> <span class="k">New</span> <span class="n">BaseballTeam</span><span class="p">(</span><span class="s">&quot;San Francisco Giants&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">&#39;Dim - Allocates space for one or more variables</span>
</span><span class='line'><span class="c">&#39;As  - Identifies a data type in a declaration</span>
</span><span class='line'><span class="c">&#39;New - Creates a new object instace</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Ruby</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#Ruby</span>
</span><span class='line'><span class="n">sf</span> <span class="o">=</span> <span class="no">BaseballTeam</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;San Francisco Giants&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#Ruby is not strictly typed so there&#39;s no need to identify the data type.</span>
</span><span class='line'><span class="c1">#Object.new is a class method which allocates space and create an instance of the class.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Many languages use a &lsquo;new&rsquo; keyword which Ruby does not have to create an object instance.
Ruby instead provides a method &lsquo;new&rsquo; which is called directly on a class.</p>

<h2>Ruby Constructor Responsibilities</h2>

<p>The Ruby Constructor has three jobs.</p>

<ul>
<li>It allocates space for the object</li>
<li>It assigns instances variables their initial values</li>
<li>It returns the instance of that class</li>
</ul>


<figure class='code'><figcaption><span>Ruby Constructor Responsibilities</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">bar</span><span class="p">,</span> <span class="n">biz</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@bar</span> <span class="o">=</span> <span class="n">bar</span>
</span><span class='line'>    <span class="vi">@biz</span> <span class="o">=</span> <span class="n">biz</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wait a second!? Why are we talking about &lsquo;initialize&rsquo; all of a sudden?
I thought we were talking about &lsquo;new&rsquo;?</p>

<h2>#initialize vs .new</h2>

<figure class='code'><figcaption><span>#initialize vs .new</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'><span class="c1">#         /-- defined as an instance method</span>
</span><span class='line'><span class="c1">#        /</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">bar</span><span class="p">,</span> <span class="n">biz</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@bar</span> <span class="o">=</span> <span class="n">bar</span>
</span><span class='line'>    <span class="vi">@biz</span> <span class="o">=</span> <span class="n">biz</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#           /-- called on the class thus it&#39;s a class method</span>
</span><span class='line'><span class="c1">#          /</span>
</span><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>#initialize is an instance method</li>
<li>.new is a class method</li>
</ul>


<p>To clarify, .new is the ruby constructor not the instance method #initialize. Remember,
the constructor performs three actions.</p>

<ul>
<li>It allocates space for a new instance of the class</li>
<li>It assigns instances variables their initial values</li>
<li>It returns the instance of that class</li>
</ul>


<p>The class method .new performs these actions, not #initialize which is used for
assigning instances variables their initial values.</p>

<p>We can implement our own version of the .new method to illustrate how it might
accomplish this.</p>

<figure class='code'><figcaption><span>Ruby</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">new_object</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#                  /-- allocates a new instance of the class.</span>
</span><span class='line'><span class="c1">#                 /    It does not call initialize</span>
</span><span class='line'>    <span class="n">instance</span> <span class="o">=</span> <span class="n">allocate</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#         /-- pass the arguments over to #initialize in order to </span>
</span><span class='line'><span class="c1">#        /    to set instance variables</span>
</span><span class='line'>    <span class="n">instance</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:initialize</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#       /-- return the instance of this class    </span>
</span><span class='line'>    <span class="n">instance</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">bar</span><span class="p">,</span> <span class="n">biz</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@bar</span> <span class="o">=</span> <span class="n">bar</span>
</span><span class='line'>    <span class="vi">@biz</span> <span class="o">=</span> <span class="n">biz</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Console Output </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">#                                   /- as you can see the standard .new method and</span>
</span><span class='line'><span class="go">#                                  /   our implementation both return instances of the</span>
</span><span class='line'><span class="go">#                                 /    class and set the instance variables</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="no">Foo</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>        <span class="c1">#=&gt; #&lt;Foo:0x007fac3e15d0a0 @bar=1, @biz=2&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="no">Foo</span><span class="o">.</span><span class="n">new_object</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="c1">#=&gt; #&lt;Foo:0x007fac3e206420 @bar=1, @biz=2&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see above, our own custom constructor is functionally equivalent
to the default constructor. Both constructors return an instance of class Foo
with their instance variables set. This knowledge can help us do some pretty neat things.</p>

<h2>Constructor overloading&hellip;sort of</h2>

<figure class='code'><figcaption><span>Constructor overloading in Visual Basic .NET</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='vb.net'><span class='line'><span class="k">Public</span> <span class="k">Class</span> <span class="nc">Vehicle</span>
</span><span class='line'>    <span class="k">Private</span> <span class="n">m_Wheels</span> <span class="ow">As</span> <span class="kt">Integer</span>
</span><span class='line'>
</span><span class='line'><span class="c">&#39;        /- default constructor</span>
</span><span class='line'>    <span class="k">Sub</span> <span class="nf">New</span><span class="p">()</span>
</span><span class='line'>        <span class="n">m_Wheels</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'>    <span class="k">End</span> <span class="k">Sub</span>
</span><span class='line'>
</span><span class='line'><span class="c">&#39;        /- overloaded constructor</span>
</span><span class='line'>    <span class="k">Sub</span> <span class="nf">New</span><span class="p">(</span><span class="k">ByVal</span> <span class="n">NumberOfWheels</span> <span class="ow">As</span> <span class="kt">Integer</span><span class="p">)</span>
</span><span class='line'>        <span class="n">m_Wheels</span> <span class="o">=</span> <span class="n">NumberOfWheels</span>
</span><span class='line'>    <span class="k">End</span> <span class="k">Sub</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">Public</span> <span class="k">Property</span> <span class="nf">NumberOfWheels</span><span class="p">()</span>
</span><span class='line'>        <span class="k">Get</span>
</span><span class='line'>            <span class="k">Return</span> <span class="n">m_Wheels</span>
</span><span class='line'>        <span class="k">End</span> <span class="k">Get</span>
</span><span class='line'>        <span class="k">Set</span><span class="p">(</span><span class="k">ByVal</span> <span class="n">Value</span><span class="p">)</span>
</span><span class='line'>            <span class="n">m_Wheels</span> <span class="o">=</span> <span class="n">Value</span>
</span><span class='line'>        <span class="k">End</span> <span class="k">Set</span>
</span><span class='line'>    <span class="k">End</span> <span class="k">Property</span>
</span><span class='line'>
</span><span class='line'><span class="k">End</span> <span class="k">Class</span>
</span></code></pre></td></tr></table></div></figure>


<p>One of the things I used to miss when I started working in Ruby was the ability to
overload constructors. Strictly speaking, overloading uses the same constructor
method name but uses a different signature or parameter list which you can&rsquo;t do in
Ruby.</p>

<figure class='code'><figcaption><span>Overloading constructors in Ruby</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Circle</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:radius</span><span class="p">,</span> <span class="ss">:area</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#=&gt; Custom Constructors</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">new_by_radius</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">circle</span> <span class="o">=</span> <span class="n">allocate</span>
</span><span class='line'>    <span class="n">circle</span><span class="o">.</span><span class="n">init_radius</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">circle</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">new_by_area</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">circle</span> <span class="o">=</span> <span class="n">allocate</span>
</span><span class='line'>    <span class="n">circle</span><span class="o">.</span><span class="n">init_area</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">circle</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#=&gt; Custom Initializers</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">init_radius</span><span class="p">(</span><span class="n">_radius</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@radius</span> <span class="o">=</span> <span class="n">_radius</span> <span class="o">*</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'>    <span class="vi">@area</span> <span class="o">=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">14</span> <span class="o">*</span> <span class="p">(</span><span class="vi">@radius</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">init_area</span><span class="p">(</span><span class="n">_area</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@area</span> <span class="o">=</span> <span class="n">_area</span> <span class="o">*</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'>    <span class="vi">@radius</span> <span class="o">=</span> <span class="no">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="vi">@area</span> <span class="o">/</span> <span class="mi">3</span><span class="o">.</span><span class="mi">14</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Console Output </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="gp">&gt;&gt; </span><span class="no">Circle</span><span class="o">.</span><span class="n">new_by_radius</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c1">#=&gt; #&lt;Circle:0x007fe77523d598 @radius=10.0, @area=314.0&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt; </span><span class="no">Circle</span><span class="o">.</span><span class="n">new_by_area</span><span class="p">(</span><span class="mi">314</span><span class="p">)</span>  <span class="c1">#=&gt; #&lt;Circle:0x007fe7752e6f08 @radius=10.0, @area=314.0&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can accomplish a similar goal by creating our own custom constructors.
Then we can see our custom constructors in action above.</p>

<h2>Summary</h2>

<p>The ruby constructor performs 3 jobs; allocates space, assigns
instance variables and returns the instance. The method .new is a class method and
constructor; #initialize is an instance method used to assign instance variables.
You can write your own constructors for fun and profit.</p>

<p>Feel free to drop some comments or questions below. And if you liked it then
please share on twitter, facebook or your prefered social media channel.</p>
]]></content>
  </entry>
  
</feed>
